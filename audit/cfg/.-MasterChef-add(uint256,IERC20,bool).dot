digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: IF 1

EXPRESSION:
_withUpdate

IRs:
CONDITION _withUpdate"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
massUpdatePools()

IRs:
INTERNAL_CALL, MasterChef.massUpdatePools()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->8;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
totalAllocPoint = totalAllocPoint.add(_allocPoint)

IRs:
TMP_517(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalAllocPoint', '_allocPoint'] 
totalAllocPoint(uint256) := TMP_517(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
poolInfo.push(PoolInfo(_lpToken,_allocPoint,lastRewardBlock,0))

IRs:
TMP_518 = new PoolInfo(_lpToken,_allocPoint,lastRewardBlock,0)
REF_139 -> LENGTH poolInfo
TMP_520(uint256) := REF_139(uint256)
TMP_521(uint256) = TMP_520 (c)+ 1
REF_139 (->poolInfo) := TMP_521(uint256)
REF_140(MasterChef.PoolInfo) -> poolInfo[TMP_520]
REF_140 (->poolInfo) := TMP_518(MasterChef.PoolInfo)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
7->1;
8[label="Node Type: IF 8

EXPRESSION:
block.number > startBlock

IRs:
TMP_523(bool) = block.number > startBlock
CONDITION TMP_523"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
lastRewardBlock = block.number

IRs:
lastRewardBlock(uint256) := block.number(uint256)"];
9->11;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
lastRewardBlock = startBlock

IRs:
lastRewardBlock(uint256) := startBlock(uint256)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->5;
}
