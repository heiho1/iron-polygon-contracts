digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
pool = poolInfo[_pid]

IRs:
REF_186(MasterChef.PoolInfo) -> poolInfo[_pid]
pool(MasterChef.PoolInfo) := REF_186(MasterChef.PoolInfo)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
user = userInfo[_pid][msg.sender]

IRs:
REF_187(mapping(address => MasterChef.UserInfo)) -> userInfo[_pid]
REF_188(MasterChef.UserInfo) -> REF_187[msg.sender]
user(MasterChef.UserInfo) := REF_188(MasterChef.UserInfo)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
updatePool(_pid)

IRs:
INTERNAL_CALL, MasterChef.updatePool(uint256)(_pid)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
user.amount > 0

IRs:
REF_189(uint256) -> user.amount
TMP_563(bool) = REF_189 > 0
CONDITION TMP_563"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
pending = user.amount.mul(pool.accRewardPerShare).div(1e12).sub(user.rewardDebt)

IRs:
REF_190(uint256) -> user.amount
REF_192(uint256) -> pool.accRewardPerShare
TMP_564(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_190', 'REF_192'] 
TMP_565(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_564', '1000000000000'] 
REF_195(uint256) -> user.rewardDebt
TMP_566(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_565', 'REF_195'] 
pending(uint256) := TMP_566(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
safeRewardTransfer(msg.sender,pending)

IRs:
INTERNAL_CALL, MasterChef.safeRewardTransfer(address,uint256)(msg.sender,pending)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
pool.lpToken.safeTransferFrom(address(msg.sender),address(this),_amount)

IRs:
REF_196(IERC20) -> pool.lpToken
TMP_568 = CONVERT msg.sender to address
TMP_569 = CONVERT this to address
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransferFrom(IERC20,address,address,uint256), arguments:['REF_196', 'TMP_568', 'TMP_569', '_amount'] "];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
user.amount = user.amount.add(_amount)

IRs:
REF_198(uint256) -> user.amount
REF_199(uint256) -> user.amount
TMP_571(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_199', '_amount'] 
REF_198 (->user) := TMP_571(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e12)

IRs:
REF_201(uint256) -> user.rewardDebt
REF_202(uint256) -> user.amount
REF_204(uint256) -> pool.accRewardPerShare
TMP_572(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_202', 'REF_204'] 
TMP_573(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_572', '1000000000000'] 
REF_201 (->user) := TMP_573(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
Deposit(msg.sender,_pid,_amount)

IRs:
Emit Deposit(msg.sender._pid._amount)"];
}
