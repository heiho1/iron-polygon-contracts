digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
pool = poolInfo[_pid]

IRs:
REF_170(MasterChef.PoolInfo) -> poolInfo[_pid]
pool(MasterChef.PoolInfo) := REF_170(MasterChef.PoolInfo)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
block.number <= pool.lastRewardBlock

IRs:
REF_171(uint256) -> pool.lastRewardBlock
TMP_551(bool) = block.number <= REF_171
CONDITION TMP_551"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
lpSupply = pool.lpToken.balanceOf(address(this))

IRs:
REF_172(IERC20) -> pool.lpToken
TMP_552 = CONVERT this to address
TMP_553(uint256) = HIGH_LEVEL_CALL, dest:REF_172(IERC20), function:balanceOf, arguments:['TMP_552']  
lpSupply(uint256) := TMP_553(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
lpSupply == 0

IRs:
TMP_554(bool) = lpSupply == 0
CONDITION TMP_554"];
6->7[label="True"];
6->9[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
pool.lastRewardBlock = block.number

IRs:
REF_174(uint256) -> pool.lastRewardBlock
REF_174 (->pool) := block.number(uint256)"];
7->8;
8[label="Node Type: RETURN 8
"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
multiplier = getMultiplier(pool.lastRewardBlock,block.number)

IRs:
REF_175(uint256) -> pool.lastRewardBlock
TMP_555(uint256) = INTERNAL_CALL, MasterChef.getMultiplier(uint256,uint256)(REF_175,block.number)
multiplier(uint256) := TMP_555(uint256)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
reward = multiplier.mul(rewardPerBlock).mul(pool.allocPoint).div(totalAllocPoint)

IRs:
TMP_556(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['multiplier', 'rewardPerBlock'] 
REF_178(uint256) -> pool.allocPoint
TMP_557(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_556', 'REF_178'] 
TMP_558(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_557', 'totalAllocPoint'] 
reward(uint256) := TMP_558(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
pool.accRewardPerShare = pool.accRewardPerShare.add(reward.mul(1e12).div(lpSupply))

IRs:
REF_180(uint256) -> pool.accRewardPerShare
REF_181(uint256) -> pool.accRewardPerShare
TMP_559(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['reward', '1000000000000'] 
TMP_560(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_559', 'lpSupply'] 
TMP_561(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_181', 'TMP_560'] 
REF_180 (->pool) := TMP_561(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
pool.lastRewardBlock = block.number

IRs:
REF_185(uint256) -> pool.lastRewardBlock
REF_185 (->pool) := block.number(uint256)"];
}
