digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
pool = poolInfo[_pid]

IRs:
REF_147(MasterChef.PoolInfo) -> poolInfo[_pid]
pool(MasterChef.PoolInfo) := REF_147(MasterChef.PoolInfo)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
user = userInfo[_pid][_user]

IRs:
REF_148(mapping(address => MasterChef.UserInfo)) -> userInfo[_pid]
REF_149(MasterChef.UserInfo) -> REF_148[_user]
user(MasterChef.UserInfo) := REF_149(MasterChef.UserInfo)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
accRewardPerShare = pool.accRewardPerShare

IRs:
REF_150(uint256) -> pool.accRewardPerShare
accRewardPerShare(uint256) := REF_150(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
lpSupply = pool.lpToken.balanceOf(address(this))

IRs:
REF_151(IERC20) -> pool.lpToken
TMP_532 = CONVERT this to address
TMP_533(uint256) = HIGH_LEVEL_CALL, dest:REF_151(IERC20), function:balanceOf, arguments:['TMP_532']  
lpSupply(uint256) := TMP_533(uint256)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
block.number > pool.lastRewardBlock && lpSupply != 0

IRs:
REF_153(uint256) -> pool.lastRewardBlock
TMP_534(bool) = block.number > REF_153
TMP_535(bool) = lpSupply != 0
TMP_536(bool) = TMP_534 && TMP_535
CONDITION TMP_536"];
5->6[label="True"];
5->9[label="False"];
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
multiplier = getMultiplier(pool.lastRewardBlock,block.number)

IRs:
REF_154(uint256) -> pool.lastRewardBlock
TMP_537(uint256) = INTERNAL_CALL, MasterChef.getMultiplier(uint256,uint256)(REF_154,block.number)
multiplier(uint256) := TMP_537(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
addedReward = multiplier.mul(rewardPerBlock).mul(pool.allocPoint).div(totalAllocPoint)

IRs:
TMP_538(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['multiplier', 'rewardPerBlock'] 
REF_157(uint256) -> pool.allocPoint
TMP_539(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_538', 'REF_157'] 
TMP_540(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_539', 'totalAllocPoint'] 
addedReward(uint256) := TMP_540(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
accRewardPerShare = accRewardPerShare.add(addedReward.mul(1e12).div(lpSupply))

IRs:
TMP_541(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['addedReward', '1000000000000'] 
TMP_542(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_541', 'lpSupply'] 
TMP_543(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['accRewardPerShare', 'TMP_542'] 
accRewardPerShare(uint256) := TMP_543(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
user.amount.mul(accRewardPerShare).div(1e12).sub(user.rewardDebt)

IRs:
REF_162(uint256) -> user.amount
TMP_544(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_162', 'accRewardPerShare'] 
TMP_545(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_544', '1000000000000'] 
REF_166(uint256) -> user.rewardDebt
TMP_546(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_545', 'REF_166'] 
RETURN TMP_546"];
}
