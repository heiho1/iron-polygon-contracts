digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
pool = poolInfo[_pid]

IRs:
REF_226(MasterChef.PoolInfo) -> poolInfo[_pid]
pool(MasterChef.PoolInfo) := REF_226(MasterChef.PoolInfo)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
user = userInfo[_pid][msg.sender]

IRs:
REF_227(mapping(address => MasterChef.UserInfo)) -> userInfo[_pid]
REF_228(MasterChef.UserInfo) -> REF_227[msg.sender]
user(MasterChef.UserInfo) := REF_228(MasterChef.UserInfo)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pool.lpToken.safeTransfer(address(msg.sender),user.amount)

IRs:
REF_229(IERC20) -> pool.lpToken
TMP_588 = CONVERT msg.sender to address
REF_231(uint256) -> user.amount
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['REF_229', 'TMP_588', 'REF_231'] "];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
EmergencyWithdraw(msg.sender,_pid,user.amount)

IRs:
REF_232(uint256) -> user.amount
Emit EmergencyWithdraw(msg.sender._pid.REF_232)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
user.amount = 0

IRs:
REF_233(uint256) -> user.amount
REF_233 (->user) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
user.rewardDebt = 0

IRs:
REF_234(uint256) -> user.rewardDebt
REF_234 (->user) := 0(uint256)"];
}
