digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
blockNumber = block.number

IRs:
blockNumber(uint256) := block.number(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
returnData = new bytes[](calls.length)

IRs:
REF_0 -> LENGTH calls
TMP_1 = new bytes[](REF_0)
returnData(bytes[]) := TMP_1(bytes)"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < calls.length

IRs:
REF_1 -> LENGTH calls
TMP_2(bool) = i < REF_1
CONDITION TMP_2"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: NEW VARIABLE 7
"];
7->8;
8[label="Node Type: NEW VARIABLE 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
(success,ret) = calls[i].target.call(calls[i].callData)

IRs:
REF_2(Multicall.Call) -> calls[i]
REF_3(address) -> REF_2.target
REF_5(Multicall.Call) -> calls[i]
REF_6(bytes) -> REF_5.callData
TUPLE_0(bool,bytes) = LOW_LEVEL_CALL, dest:REF_3, function:call, arguments:['REF_6']  
success(bool)= UNPACK TUPLE_0 index: 0 
ret(bytes)= UNPACK TUPLE_0 index: 1 "];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
require(bool)(success)

IRs:
TMP_3(None) = SOLIDITY_CALL require(bool)(success)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
returnData[i] = ret

IRs:
REF_7(bytes) -> returnData[i]
REF_7 (->returnData) := ret(bytes)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
i ++

IRs:
TMP_4(uint256) := i(uint256)
i(uint256) = i (c)+ 1"];
12->6;
}
