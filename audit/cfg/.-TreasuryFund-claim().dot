digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
shareFund = IShareTreasuryFund(share)

IRs:
TMP_1067 = CONVERT share to IShareTreasuryFund
shareFund(IShareTreasuryFund) := TMP_1067(IShareTreasuryFund)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
unclaimed_amount = shareFund.unclaimedTreasuryFund()

IRs:
TMP_1068(uint256) = HIGH_LEVEL_CALL, dest:shareFund(IShareTreasuryFund), function:unclaimedTreasuryFund, arguments:[]  
unclaimed_amount(uint256) := TMP_1068(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
shareFund.claimTreasuryFundRewards()

IRs:
HIGH_LEVEL_CALL, dest:shareFund(IShareTreasuryFund), function:claimTreasuryFundRewards, arguments:[]  "];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
burnAmount = (unclaimed_amount * BURN_EXESS_RATIO) / PRECISION

IRs:
TMP_1070(uint256) = unclaimed_amount (c)* BURN_EXESS_RATIO
TMP_1071(uint256) = TMP_1070 (c)/ PRECISION
burnAmount(uint256) := TMP_1071(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
ERC20Custom(share).burn(burnAmount)

IRs:
TMP_1072 = CONVERT share to ERC20Custom
HIGH_LEVEL_CALL, dest:TMP_1072(ERC20Custom), function:burn, arguments:['burnAmount']  "];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
6->1;
}
