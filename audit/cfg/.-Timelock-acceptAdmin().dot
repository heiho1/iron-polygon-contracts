digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == pendingAdmin,Timelock::acceptAdmin: Call must come from pendingAdmin.)

IRs:
TMP_12(bool) = msg.sender == pendingAdmin
TMP_13(None) = SOLIDITY_CALL require(bool,string)(TMP_12,Timelock::acceptAdmin: Call must come from pendingAdmin.)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
admin = msg.sender

IRs:
admin(address) := msg.sender(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pendingAdmin = address(0)

IRs:
TMP_14 = CONVERT 0 to address
pendingAdmin(address) := TMP_14(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
NewAdmin(admin)

IRs:
Emit NewAdmin(admin)"];
}
