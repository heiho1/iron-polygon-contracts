digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(sender != address(0),ERC20: transfer from the zero address)

IRs:
TMP_43 = CONVERT 0 to address
TMP_44(bool) = sender != TMP_43
TMP_45(None) = SOLIDITY_CALL require(bool,string)(TMP_44,ERC20: transfer from the zero address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(recipient != address(0),ERC20: transfer to the zero address)

IRs:
TMP_46 = CONVERT 0 to address
TMP_47(bool) = recipient != TMP_46
TMP_48(None) = SOLIDITY_CALL require(bool,string)(TMP_47,ERC20: transfer to the zero address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_beforeTokenTransfer(sender,recipient,amount)

IRs:
INTERNAL_CALL, ERC20._beforeTokenTransfer(address,address,uint256)(sender,recipient,amount)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
senderBalance = _balances[sender]

IRs:
REF_9(uint256) -> _balances[sender]
senderBalance(uint256) := REF_9(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(senderBalance >= amount,ERC20: transfer amount exceeds balance)

IRs:
TMP_50(bool) = senderBalance >= amount
TMP_51(None) = SOLIDITY_CALL require(bool,string)(TMP_50,ERC20: transfer amount exceeds balance)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_balances[sender] = senderBalance - amount

IRs:
REF_10(uint256) -> _balances[sender]
TMP_52(uint256) = senderBalance (c)- amount
REF_10 (->_balances) := TMP_52(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_balances[recipient] += amount

IRs:
REF_11(uint256) -> _balances[recipient]
REF_11(-> _balances) = REF_11 (c)+ amount"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(sender,recipient,amount)

IRs:
Emit Transfer(sender.recipient.amount)"];
}
