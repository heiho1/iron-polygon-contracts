digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(account != address(0),ERC20: burn from the zero address)

IRs:
TMP_61 = CONVERT 0 to address
TMP_62(bool) = account != TMP_61
TMP_63(None) = SOLIDITY_CALL require(bool,string)(TMP_62,ERC20: burn from the zero address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_beforeTokenTransfer(account,address(0),amount)

IRs:
TMP_64 = CONVERT 0 to address
INTERNAL_CALL, ERC20._beforeTokenTransfer(address,address,uint256)(account,TMP_64,amount)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
accountBalance = _balances[account]

IRs:
REF_13(uint256) -> _balances[account]
accountBalance(uint256) := REF_13(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(accountBalance >= amount,ERC20: burn amount exceeds balance)

IRs:
TMP_66(bool) = accountBalance >= amount
TMP_67(None) = SOLIDITY_CALL require(bool,string)(TMP_66,ERC20: burn amount exceeds balance)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_balances[account] = accountBalance - amount

IRs:
REF_14(uint256) -> _balances[account]
TMP_68(uint256) = accountBalance (c)- amount
REF_14 (->_balances) := TMP_68(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_totalSupply -= amount

IRs:
_totalSupply(uint256) = _totalSupply (c)- amount"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(account,address(0),amount)

IRs:
TMP_69 = CONVERT 0 to address
Emit Transfer(account.TMP_69.amount)"];
}
