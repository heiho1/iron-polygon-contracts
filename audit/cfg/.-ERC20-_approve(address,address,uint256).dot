digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(owner != address(0),ERC20: approve from the zero address)

IRs:
TMP_71 = CONVERT 0 to address
TMP_72(bool) = owner != TMP_71
TMP_73(None) = SOLIDITY_CALL require(bool,string)(TMP_72,ERC20: approve from the zero address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(spender != address(0),ERC20: approve to the zero address)

IRs:
TMP_74 = CONVERT 0 to address
TMP_75(bool) = spender != TMP_74
TMP_76(None) = SOLIDITY_CALL require(bool,string)(TMP_75,ERC20: approve to the zero address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_allowances[owner][spender] = amount

IRs:
REF_15(mapping(address => uint256)) -> _allowances[owner]
REF_16(uint256) -> REF_15[spender]
REF_16 (->_allowances) := amount(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Approval(owner,spender,amount)

IRs:
Emit Approval(owner.spender.amount)"];
}
