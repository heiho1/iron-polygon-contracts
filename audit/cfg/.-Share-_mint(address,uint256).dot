digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(account != address(0),ERC20: mint to the zero address)

IRs:
TMP_787 = CONVERT 0 to address
TMP_788(bool) = account != TMP_787
TMP_789(None) = SOLIDITY_CALL require(bool,string)(TMP_788,ERC20: mint to the zero address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_beforeTokenTransfer(address(0),account,amount)

IRs:
TMP_790 = CONVERT 0 to address
INTERNAL_CALL, ERC20Custom._beforeTokenTransfer(address,address,uint256)(TMP_790,account,amount)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_totalSupply = _totalSupply.add(amount)

IRs:
TMP_792(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_totalSupply', 'amount'] 
_totalSupply(uint256) := TMP_792(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_balances[account] = _balances[account].add(amount)

IRs:
REF_280(uint256) -> _balances[account]
REF_281(uint256) -> _balances[account]
TMP_793(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_281', 'amount'] 
REF_280 (->_balances) := TMP_793(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(address(0),account,amount)

IRs:
TMP_794 = CONVERT 0 to address
Emit Transfer(TMP_794.account.amount)"];
}
