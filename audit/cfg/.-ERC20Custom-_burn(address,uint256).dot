digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(account != address(0),ERC20: burn from the zero address)

IRs:
TMP_480 = CONVERT 0 to address
TMP_481(bool) = account != TMP_480
TMP_482(None) = SOLIDITY_CALL require(bool,string)(TMP_481,ERC20: burn from the zero address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_beforeTokenTransfer(account,address(0),amount)

IRs:
TMP_483 = CONVERT 0 to address
INTERNAL_CALL, ERC20Custom._beforeTokenTransfer(address,address,uint256)(account,TMP_483,amount)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_balances[account] = _balances[account].sub(amount,ERC20: burn amount exceeds balance)

IRs:
REF_126(uint256) -> _balances[account]
REF_127(uint256) -> _balances[account]
TMP_485(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256,string), arguments:['REF_127', 'amount', 'ERC20: burn amount exceeds balance'] 
REF_126 (->_balances) := TMP_485(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_totalSupply = _totalSupply.sub(amount)

IRs:
TMP_486(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_totalSupply', 'amount'] 
_totalSupply(uint256) := TMP_486(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(account,address(0),amount)

IRs:
TMP_487 = CONVERT 0 to address
Emit Transfer(account.TMP_487.amount)"];
}
