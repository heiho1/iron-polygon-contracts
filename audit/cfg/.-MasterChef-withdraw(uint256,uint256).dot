digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
pool = poolInfo[_pid]

IRs:
REF_206(MasterChef.PoolInfo) -> poolInfo[_pid]
pool(MasterChef.PoolInfo) := REF_206(MasterChef.PoolInfo)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
user = userInfo[_pid][msg.sender]

IRs:
REF_207(mapping(address => MasterChef.UserInfo)) -> userInfo[_pid]
REF_208(MasterChef.UserInfo) -> REF_207[msg.sender]
user(MasterChef.UserInfo) := REF_208(MasterChef.UserInfo)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(user.amount >= _amount,withdraw: not good)

IRs:
REF_209(uint256) -> user.amount
TMP_575(bool) = REF_209 >= _amount
TMP_576(None) = SOLIDITY_CALL require(bool,string)(TMP_575,withdraw: not good)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
updatePool(_pid)

IRs:
INTERNAL_CALL, MasterChef.updatePool(uint256)(_pid)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
pending = user.amount.mul(pool.accRewardPerShare).div(1e12).sub(user.rewardDebt)

IRs:
REF_210(uint256) -> user.amount
REF_212(uint256) -> pool.accRewardPerShare
TMP_578(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_210', 'REF_212'] 
TMP_579(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_578', '1000000000000'] 
REF_215(uint256) -> user.rewardDebt
TMP_580(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_579', 'REF_215'] 
pending(uint256) := TMP_580(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
safeRewardTransfer(msg.sender,pending)

IRs:
INTERNAL_CALL, MasterChef.safeRewardTransfer(address,uint256)(msg.sender,pending)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
user.amount = user.amount.sub(_amount)

IRs:
REF_216(uint256) -> user.amount
REF_217(uint256) -> user.amount
TMP_582(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_217', '_amount'] 
REF_216 (->user) := TMP_582(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e12)

IRs:
REF_219(uint256) -> user.rewardDebt
REF_220(uint256) -> user.amount
REF_222(uint256) -> pool.accRewardPerShare
TMP_583(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_220', 'REF_222'] 
TMP_584(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_583', '1000000000000'] 
REF_219 (->user) := TMP_584(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
pool.lpToken.safeTransfer(address(msg.sender),_amount)

IRs:
REF_224(IERC20) -> pool.lpToken
TMP_585 = CONVERT msg.sender to address
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['REF_224', 'TMP_585', '_amount'] "];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
Withdraw(msg.sender,_pid,_amount)

IRs:
Emit Withdraw(msg.sender._pid._amount)"];
}
