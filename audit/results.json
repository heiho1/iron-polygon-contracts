{
  "arbitrary-send": [
    "VaultController.executeTransaction(address,uint256,string,bytes) (contracts/vaults/VaultController.sol#108-125) sends eth to arbitrary user\n\tDangerous calls:\n\t- (success,returnData) = target.call{value: value}(callData) (contracts/vaults/VaultController.sol#122)\n",
    "TreasuryVaultAave.executeTransaction(address,uint256,string,bytes) (contracts/vaults/aave/TreasuryVaultAave.sol#115-132) sends eth to arbitrary user\n\tDangerous calls:\n\t- (success,returnData) = target.call{value: value}(callData) (contracts/vaults/aave/TreasuryVaultAave.sol#129)\n"
  ],
  "weak-prng": [
    "PcsPairOracle.currentBlockTimestamp() (contracts/oracle/PcsPairOracle.sol#73-75) uses a weak PRNG: \"uint32(block.timestamp % 2 ** 32) (contracts/oracle/PcsPairOracle.sol#74)\" \n"
  ],
  "unchecked-transfer": [
    "TreasuryFund.transfer(address,uint256) (contracts/TreasuryFund.sol#33-35) ignores return value by IERC20(share).transfer(_recipient,amount) (contracts/TreasuryFund.sol#34)\n"
  ],
  "divide-before-multiply": [
    "MasterChef.pendingReward(uint256,address) (contracts/MasterChef.sol#116-127) performs a multiplication on the result of a division:\n\t-addedReward = multiplier.mul(rewardPerBlock).mul(pool.allocPoint).div(totalAllocPoint) (contracts/MasterChef.sol#123)\n\t-accRewardPerShare = accRewardPerShare.add(addedReward.mul(1e12).div(lpSupply)) (contracts/MasterChef.sol#124)\n",
    "MasterChef.updatePool(uint256) (contracts/MasterChef.sol#142-156) performs a multiplication on the result of a division:\n\t-reward = multiplier.mul(rewardPerBlock).mul(pool.allocPoint).div(totalAllocPoint) (contracts/MasterChef.sol#153)\n\t-pool.accRewardPerShare = pool.accRewardPerShare.add(reward.mul(1e12).div(lpSupply)) (contracts/MasterChef.sol#154)\n",
    "Pool.mint(uint256,uint256,uint256) (contracts/Pool.sol#106-138) performs a multiplication on the result of a division:\n\t-_collateral_value = ((_collateral_amount * (10 ** missing_decimals)) * _price_collateral) / PRICE_PRECISION (contracts/Pool.sol#118)\n\t-_total_dollar_value = (_collateral_value * COLLATERAL_RATIO_PRECISION) / _tcr (contracts/Pool.sol#119)\n",
    "Pool.mint(uint256,uint256,uint256) (contracts/Pool.sol#106-138) performs a multiplication on the result of a division:\n\t-_total_dollar_value = (_collateral_value * COLLATERAL_RATIO_PRECISION) / _tcr (contracts/Pool.sol#119)\n\t-_actual_dollar_amount = _total_dollar_value - ((_total_dollar_value * _minting_fee) / PRICE_PRECISION) (contracts/Pool.sol#127)\n",
    "Pool.redeem(uint256,uint256,uint256) (contracts/Pool.sol#140-186) performs a multiplication on the result of a division:\n\t-_collateral_output_value = ((_dollar_amount_post_fee * _ecr) / PRICE_PRECISION) / (10 ** missing_decimals) (contracts/Pool.sol#160)\n\t-_collateral_output_amount = (_collateral_output_value * PRICE_PRECISION) / _collateral_price (contracts/Pool.sol#161)\n",
    "ZapPool.zapMint(uint256,uint256) (contracts/ZapPool.sol#81-111) performs a multiplication on the result of a division:\n\t-_collateral_value = (_collateral_amount * (10 ** missing_decimals) * _price_collateral) / PRICE_PRECISION (contracts/ZapPool.sol#87)\n\t-_actual_dollar_amount = _collateral_value - ((_collateral_value * _minting_fee) / PRICE_PRECISION) (contracts/ZapPool.sol#88)\n",
    "ZapPool.zapMint(uint256,uint256) (contracts/ZapPool.sol#81-111) performs a multiplication on the result of a division:\n\t-_collateral_value = (_collateral_amount * (10 ** missing_decimals) * _price_collateral) / PRICE_PRECISION (contracts/ZapPool.sol#87)\n\t-_share_value = (_collateral_value * (RATIO_PRECISION - _tcr)) / RATIO_PRECISION (contracts/ZapPool.sol#93)\n",
    "ZapPool.zapMint(uint256,uint256) (contracts/ZapPool.sol#81-111) performs a multiplication on the result of a division:\n\t-_share_value = (_collateral_value * (RATIO_PRECISION - _tcr)) / RATIO_PRECISION (contracts/ZapPool.sol#93)\n\t-_min_share_amount = (_share_value * PRICE_PRECISION * (RATIO_PRECISION - slippage)) / _share_price / RATIO_PRECISION (contracts/ZapPool.sol#94)\n"
  ],
  "erc20-interface": [
    "TreasuryFund (contracts/TreasuryFund.sol#13-52) has incorrect ERC20 function interface:TreasuryFund.transfer(address,uint256) (contracts/TreasuryFund.sol#33-35)\n"
  ],
  "incorrect-equality": [
    "MasterChef.updatePool(uint256) (contracts/MasterChef.sol#142-156) uses a dangerous strict equality:\n\t- lpSupply == 0 (contracts/MasterChef.sol#148)\n",
    "VaultController._swap(address,address,uint256) (contracts/vaults/VaultController.sol#60-84) uses a dangerous strict equality:\n\t- _inputAmount == 0 (contracts/vaults/VaultController.sol#65)\n"
  ],
  "reentrancy-no-eth": [
    "Reentrancy in MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#159-171):\n\tExternal calls:\n\t- safeRewardTransfer(msg.sender,pending) (contracts/MasterChef.sol#165)\n\t\t- IConsolidatedFund(fund).transferTo(address(rewardToken),_to,_amount) (contracts/MasterChef.sol#199)\n\t- pool.lpToken.safeTransferFrom(address(msg.sender),address(this),_amount) (contracts/MasterChef.sol#167)\n\tState variables written after the call(s):\n\t- user.amount = user.amount.add(_amount) (contracts/MasterChef.sol#168)\n\t- user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e12) (contracts/MasterChef.sol#169)\n",
    "Reentrancy in MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#188-195):\n\tExternal calls:\n\t- pool.lpToken.safeTransfer(address(msg.sender),user.amount) (contracts/MasterChef.sol#191)\n\tState variables written after the call(s):\n\t- user.amount = 0 (contracts/MasterChef.sol#193)\n\t- user.rewardDebt = 0 (contracts/MasterChef.sol#194)\n",
    "Reentrancy in MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#174-185):\n\tExternal calls:\n\t- safeRewardTransfer(msg.sender,pending) (contracts/MasterChef.sol#180)\n\t\t- IConsolidatedFund(fund).transferTo(address(rewardToken),_to,_amount) (contracts/MasterChef.sol#199)\n\tState variables written after the call(s):\n\t- user.amount = user.amount.sub(_amount) (contracts/MasterChef.sol#181)\n\t- user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e12) (contracts/MasterChef.sol#182)\n",
    "Reentrancy in TreasuryVaultAave.withdraw() (contracts/vaults/aave/TreasuryVaultAave.sol#68-79):\n\tExternal calls:\n\t- AaveLendingPool.withdraw(address(asset),balanceOfAToken(),address(this)) (contracts/vaults/aave/TreasuryVaultAave.sol#69)\n\t- asset.safeTransfer(treasury,newBalance) (contracts/vaults/aave/TreasuryVaultAave.sol#75)\n\tState variables written after the call(s):\n\t- vaultBalance = asset.balanceOf(address(this)) (contracts/vaults/aave/TreasuryVaultAave.sol#76)\n"
  ],
  "uninitialized-local": [
    "Pool.collectRedemption()._share_amount (contracts/Pool.sol#193) is a local variable never initialized\n",
    "FixedPoint.mul(FixedPoint.uq112x112,uint256).z (contracts/libs/FixedPoint.sol#44) is a local variable never initialized\n",
    "Pool.collectRedemption()._collateral_amount (contracts/Pool.sol#194) is a local variable never initialized\n"
  ],
  "unused-return": [
    "TreasuryVaultAave.withdraw() (contracts/vaults/aave/TreasuryVaultAave.sol#68-79) ignores return value by AaveLendingPool.withdraw(address(asset),balanceOfAToken(),address(this)) (contracts/vaults/aave/TreasuryVaultAave.sol#69)\n",
    "TreasuryVaultAave.claimIncetiveRewards() (contracts/vaults/aave/TreasuryVaultAave.sol#81-87) ignores return value by AaveIncentivesController.claimRewards(_tokens,unclaimedRewards,msg.sender) (contracts/vaults/aave/TreasuryVaultAave.sol#85)\n"
  ],
  "events-access": [
    "Dollar.initialize(string,string,address) (contracts/Dollar.sol#30-39) should emit an event for: \n\t- treasury = _treasury (contracts/Dollar.sol#37) \n",
    "Share.initialize(string,string,address,address,address,uint256) (contracts/Share.sol#52-69) should emit an event for: \n\t- treasury = _treasury (contracts/Share.sol#62) \n\t- treasuryFund = _treasuryFund (contracts/Share.sol#63) \n",
    "Share.setTreasuryFund(address) (contracts/Share.sol#88-91) should emit an event for: \n\t- treasuryFund = _treasuryFund (contracts/Share.sol#90) \n"
  ],
  "events-maths": [
    "Share.initialize(string,string,address,address,address,uint256) (contracts/Share.sol#52-69) should emit an event for: \n\t- endTime = _startTime + TREASURY_FUND_VESTING_DURATION (contracts/Share.sol#66) \n\t- treasuryFundLastClaimed = _startTime (contracts/Share.sol#67) \n"
  ],
  "missing-zero-check": [
    "Dollar.initialize(string,string,address)._treasury (contracts/Dollar.sol#33) lacks a zero-check on :\n\t\t- treasury = _treasury (contracts/Dollar.sol#37)\n",
    "MasterChef.constructor(IERC20,address,uint256,uint256)._fund (contracts/MasterChef.sol#64) lacks a zero-check on :\n\t\t- fund = _fund (contracts/MasterChef.sol#71)\n",
    "Pool.initialize(address,address,address,address)._dollar (contracts/Pool.sol#62) lacks a zero-check on :\n\t\t- dollar = _dollar (contracts/Pool.sol#67)\n",
    "Pool.initialize(address,address,address,address)._share (contracts/Pool.sol#63) lacks a zero-check on :\n\t\t- share = _share (contracts/Pool.sol#68)\n",
    "Pool.initialize(address,address,address,address)._collateral (contracts/Pool.sol#64) lacks a zero-check on :\n\t\t- collateral = _collateral (contracts/Pool.sol#69)\n",
    "Pool.initialize(address,address,address,address)._treasury (contracts/Pool.sol#65) lacks a zero-check on :\n\t\t- treasury = _treasury (contracts/Pool.sol#70)\n",
    "Share.initialize(string,string,address,address,address,uint256)._treasury (contracts/Share.sol#55) lacks a zero-check on :\n\t\t- treasury = _treasury (contracts/Share.sol#62)\n",
    "Share.initialize(string,string,address,address,address,uint256)._treasuryFund (contracts/Share.sol#56) lacks a zero-check on :\n\t\t- treasuryFund = _treasuryFund (contracts/Share.sol#63)\n",
    "Share.initialize(string,string,address,address,address,uint256)._communityRewardController (contracts/Share.sol#57) lacks a zero-check on :\n\t\t- communityRewardController = _communityRewardController (contracts/Share.sol#64)\n",
    "TreasuryFund.setShareAddress(address)._share (contracts/TreasuryFund.sol#45) lacks a zero-check on :\n\t\t- share = _share (contracts/TreasuryFund.sol#46)\n",
    "TreasuryPolicy.initialize(address,uint256,uint256,uint256)._treasury (contracts/TreasuryPolicy.sol#32) lacks a zero-check on :\n\t\t- treasury = _treasury (contracts/TreasuryPolicy.sol#37)\n",
    "CollateralOracle.constructor(address)._chainlinkCollateralUsd (contracts/oracle/CollateralOracle.sol#15) lacks a zero-check on :\n\t\t- chainlinkCollateralUsd = _chainlinkCollateralUsd (contracts/oracle/CollateralOracle.sol#16)\n",
    "CollateralOracle.setChainlinkCollateralUsd(address)._chainlinkCollateralUsd (contracts/oracle/CollateralOracle.sol#26) lacks a zero-check on :\n\t\t- chainlinkCollateralUsd = _chainlinkCollateralUsd (contracts/oracle/CollateralOracle.sol#27)\n",
    "DollarOracle.constructor(address,address,address,uint256)._dollar (contracts/oracle/DollarOracle.sol#20) lacks a zero-check on :\n\t\t- dollar = _dollar (contracts/oracle/DollarOracle.sol#25)\n",
    "DollarOracle.constructor(address,address,address,uint256)._oracleCollateralUsd (contracts/oracle/DollarOracle.sol#22) lacks a zero-check on :\n\t\t- oracleCollateralUsd = _oracleCollateralUsd (contracts/oracle/DollarOracle.sol#26)\n",
    "DollarOracle.constructor(address,address,address,uint256)._oracleDollarCollateral (contracts/oracle/DollarOracle.sol#21) lacks a zero-check on :\n\t\t- oracleDollarCollateral = _oracleDollarCollateral (contracts/oracle/DollarOracle.sol#27)\n",
    "DollarOracle.setOracleCollateralUsd(address)._oracleCollateralUsd (contracts/oracle/DollarOracle.sol#41) lacks a zero-check on :\n\t\t- oracleCollateralUsd = _oracleCollateralUsd (contracts/oracle/DollarOracle.sol#42)\n",
    "DollarOracle.setOracleDollarCollateral(address)._oracleDollarCollateral (contracts/oracle/DollarOracle.sol#45) lacks a zero-check on :\n\t\t- oracleDollarCollateral = _oracleDollarCollateral (contracts/oracle/DollarOracle.sol#46)\n",
    "ShareOracle.constructor(address,address,address)._share (contracts/oracle/ShareOracle.sol#19) lacks a zero-check on :\n\t\t- share = _share (contracts/oracle/ShareOracle.sol#23)\n",
    "ShareOracle.constructor(address,address,address)._chainlinkToUsd (contracts/oracle/ShareOracle.sol#21) lacks a zero-check on :\n\t\t- chainlinkToUsd = _chainlinkToUsd (contracts/oracle/ShareOracle.sol#24)\n",
    "ShareOracle.constructor(address,address,address)._oracleShare (contracts/oracle/ShareOracle.sol#20) lacks a zero-check on :\n\t\t- oracleShare = _oracleShare (contracts/oracle/ShareOracle.sol#25)\n",
    "ShareOracle.setChainlinkToUsd(address)._chainlinkToUsd (contracts/oracle/ShareOracle.sol#41) lacks a zero-check on :\n\t\t- chainlinkToUsd = _chainlinkToUsd (contracts/oracle/ShareOracle.sol#42)\n",
    "ShareOracle.setOracleShare(address)._oracleShare (contracts/oracle/ShareOracle.sol#45) lacks a zero-check on :\n\t\t- oracleShare = _oracleShare (contracts/oracle/ShareOracle.sol#46)\n",
    "VaultController.executeTransaction(address,uint256,string,bytes).target (contracts/vaults/VaultController.sol#109) lacks a zero-check on :\n\t\t- (success,returnData) = target.call{value: value}(callData) (contracts/vaults/VaultController.sol#122)\n",
    "TreasuryVaultAave.initialize(address,address,address,address)._treasury (contracts/vaults/aave/TreasuryVaultAave.sol#44) lacks a zero-check on :\n\t\t- treasury = _treasury (contracts/vaults/aave/TreasuryVaultAave.sol#49)\n",
    "TreasuryVaultAave.executeTransaction(address,uint256,string,bytes).target (contracts/vaults/aave/TreasuryVaultAave.sol#116) lacks a zero-check on :\n\t\t- (success,returnData) = target.call{value: value}(callData) (contracts/vaults/aave/TreasuryVaultAave.sol#129)\n",
    "Timelock.constructor(address,uint256).admin_ (contracts/Timelock.sol#44) lacks a zero-check on :\n\t\t- admin = admin_ (contracts/Timelock.sol#48)\n",
    "Timelock.setPendingAdmin(address).pendingAdmin_ (contracts/Timelock.sol#69) lacks a zero-check on :\n\t\t- pendingAdmin = pendingAdmin_ (contracts/Timelock.sol#71)\n",
    "Timelock.executeTransaction(address,uint256,string,bytes,uint256).target (contracts/Timelock.sol#112) lacks a zero-check on :\n\t\t- (success,returnData) = target.call{value: value}(callData) (contracts/Timelock.sol#136)\n"
  ],
  "calls-loop": [
    "Treasury.totalUnclaimedBalance() (contracts/Treasury.sol#159-170) has external calls inside a loop: _totalUnclaimed = _totalUnclaimed + (IPool(pools_array[i]).unclaimed_pool_collateral()) (contracts/Treasury.sol#164-166)\n",
    "Multicall.aggregate(Multicall.Call[]) (contracts/Multicall.sol#20-31) has external calls inside a loop: (success,ret) = calls[i].target.call(calls[i].callData) (contracts/Multicall.sol#27)\n"
  ],
  "reentrancy-benign": [
    "Reentrancy in TreasuryVaultAave.deposit(uint256) (contracts/vaults/aave/TreasuryVaultAave.sol#57-66):\n\tExternal calls:\n\t- asset.safeTransferFrom(msg.sender,address(this),_amount) (contracts/vaults/aave/TreasuryVaultAave.sol#59)\n\tState variables written after the call(s):\n\t- vaultBalance = newBalance (contracts/vaults/aave/TreasuryVaultAave.sol#61)\n"
  ],
  "reentrancy-events": [
    "Reentrancy in ZapPool._transferCollateralToReserve(uint256) (contracts/ZapPool.sol#113-118):\n\tExternal calls:\n\t- collateral.safeTransfer(_reserve,_amount) (contracts/ZapPool.sol#116)\n\tEvent emitted after the call(s):\n\t- TransferedCollateral(_amount) (contracts/ZapPool.sol#117)\n",
    "Reentrancy in VaultController.claimIncentiveRewards() (contracts/vaults/VaultController.sol#49-58):\n\tExternal calls:\n\t- _swap(wmatic,usdc,_incentiveBalance) (contracts/vaults/VaultController.sol#54)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#71)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)\n\t\t- IERC20(_inputToken).safeApprove(router,0) (contracts/vaults/VaultController.sol#70)\n\t\t- IERC20(_inputToken).safeApprove(router,_inputAmount) (contracts/vaults/VaultController.sol#71)\n\t- IERC20(usdc).safeTransfer(collateralReserve,_collateralBalance) (contracts/vaults/VaultController.sol#56)\n\tExternal calls sending eth:\n\t- _swap(wmatic,usdc,_incentiveBalance) (contracts/vaults/VaultController.sol#54)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)\n\tEvent emitted after the call(s):\n\t- TreasuryHarvested(usdc,_collateralBalance) (contracts/vaults/VaultController.sol#57)\n",
    "Reentrancy in TreasuryVaultAave.claimIncetiveRewards() (contracts/vaults/aave/TreasuryVaultAave.sol#81-87):\n\tExternal calls:\n\t- AaveIncentivesController.claimRewards(_tokens,unclaimedRewards,msg.sender) (contracts/vaults/aave/TreasuryVaultAave.sol#85)\n\tEvent emitted after the call(s):\n\t- IncentivesClaimed(unclaimedRewards) (contracts/vaults/aave/TreasuryVaultAave.sol#86)\n",
    "Reentrancy in MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#159-171):\n\tExternal calls:\n\t- safeRewardTransfer(msg.sender,pending) (contracts/MasterChef.sol#165)\n\t\t- IConsolidatedFund(fund).transferTo(address(rewardToken),_to,_amount) (contracts/MasterChef.sol#199)\n\t- pool.lpToken.safeTransferFrom(address(msg.sender),address(this),_amount) (contracts/MasterChef.sol#167)\n\tEvent emitted after the call(s):\n\t- Deposit(msg.sender,_pid,_amount) (contracts/MasterChef.sol#170)\n",
    "Reentrancy in TreasuryVaultAave.deposit(uint256) (contracts/vaults/aave/TreasuryVaultAave.sol#57-66):\n\tExternal calls:\n\t- asset.safeTransferFrom(msg.sender,address(this),_amount) (contracts/vaults/aave/TreasuryVaultAave.sol#59)\n\t- asset.safeApprove(address(AaveLendingPool),0) (contracts/vaults/aave/TreasuryVaultAave.sol#62)\n\t- asset.safeApprove(address(AaveLendingPool),newBalance) (contracts/vaults/aave/TreasuryVaultAave.sol#63)\n\t- AaveLendingPool.deposit(address(asset),newBalance,address(this),0) (contracts/vaults/aave/TreasuryVaultAave.sol#64)\n\tEvent emitted after the call(s):\n\t- Deposited(_amount) (contracts/vaults/aave/TreasuryVaultAave.sol#65)\n",
    "Reentrancy in MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#188-195):\n\tExternal calls:\n\t- pool.lpToken.safeTransfer(address(msg.sender),user.amount) (contracts/MasterChef.sol#191)\n\tEvent emitted after the call(s):\n\t- EmergencyWithdraw(msg.sender,_pid,user.amount) (contracts/MasterChef.sol#192)\n",
    "Reentrancy in Treasury.extractProfit(uint256) (contracts/Treasury.sol#192-203):\n\tExternal calls:\n\t- ICollateralReserve(collateralReserve).transferTo(collateral,profitSharingFund,_amount) (contracts/Treasury.sol#201)\n\tEvent emitted after the call(s):\n\t- ProfitExtracted(_amount) (contracts/Treasury.sol#202)\n",
    "Reentrancy in MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#174-185):\n\tExternal calls:\n\t- safeRewardTransfer(msg.sender,pending) (contracts/MasterChef.sol#180)\n\t\t- IConsolidatedFund(fund).transferTo(address(rewardToken),_to,_amount) (contracts/MasterChef.sol#199)\n\t- pool.lpToken.safeTransfer(address(msg.sender),_amount) (contracts/MasterChef.sol#183)\n\tEvent emitted after the call(s):\n\t- Withdraw(msg.sender,_pid,_amount) (contracts/MasterChef.sol#184)\n",
    "Reentrancy in TreasuryVaultAave.withdraw() (contracts/vaults/aave/TreasuryVaultAave.sol#68-79):\n\tExternal calls:\n\t- AaveLendingPool.withdraw(address(asset),balanceOfAToken(),address(this)) (contracts/vaults/aave/TreasuryVaultAave.sol#69)\n\t- asset.safeTransfer(treasury,newBalance) (contracts/vaults/aave/TreasuryVaultAave.sol#75)\n\tEvent emitted after the call(s):\n\t- Profited(profit) (contracts/vaults/aave/TreasuryVaultAave.sol#78)\n\t- Withdrawn(newBalance) (contracts/vaults/aave/TreasuryVaultAave.sol#77)\n",
    "Reentrancy in ZapPool.zapMint(uint256,uint256) (contracts/ZapPool.sol#81-111):\n\tExternal calls:\n\t- collateral.safeTransferFrom(msg.sender,address(this),_collateral_amount) (contracts/ZapPool.sol#91)\n\t- collateral.safeApprove(address(router),0) (contracts/ZapPool.sol#96)\n\t- collateral.safeApprove(address(router),_swap_collateral_amount) (contracts/ZapPool.sol#97)\n\t- _received_amounts = router.swapExactTokensForTokens(_swap_collateral_amount,_min_share_amount,router_path,address(this),block.timestamp + LIMIT_SWAP_TIME) (contracts/ZapPool.sol#98)\n\tEvent emitted after the call(s):\n\t- ZapSwapped(_swap_collateral_amount,_received_amounts[_received_amounts.length - 1]) (contracts/ZapPool.sol#99)\n",
    "Reentrancy in ZapPool.zapMint(uint256,uint256) (contracts/ZapPool.sol#81-111):\n\tExternal calls:\n\t- collateral.safeTransferFrom(msg.sender,address(this),_collateral_amount) (contracts/ZapPool.sol#91)\n\t- collateral.safeApprove(address(router),0) (contracts/ZapPool.sol#96)\n\t- collateral.safeApprove(address(router),_swap_collateral_amount) (contracts/ZapPool.sol#97)\n\t- _received_amounts = router.swapExactTokensForTokens(_swap_collateral_amount,_min_share_amount,router_path,address(this),block.timestamp + LIMIT_SWAP_TIME) (contracts/ZapPool.sol#98)\n\t- ERC20Custom(address(share)).burn(_balanceShare) (contracts/ZapPool.sol#105)\n\t- _transferCollateralToReserve(_balanceCollateral) (contracts/ZapPool.sol#108)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#71)\n\t\t- collateral.safeTransfer(_reserve,_amount) (contracts/ZapPool.sol#116)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)\n\tExternal calls sending eth:\n\t- _transferCollateralToReserve(_balanceCollateral) (contracts/ZapPool.sol#108)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)\n\tEvent emitted after the call(s):\n\t- TransferedCollateral(_amount) (contracts/ZapPool.sol#117)\n\t\t- _transferCollateralToReserve(_balanceCollateral) (contracts/ZapPool.sol#108)\n",
    "Reentrancy in Timelock.executeTransaction(address,uint256,string,bytes,uint256) (contracts/Timelock.sol#111-142):\n\tExternal calls:\n\t- (success,returnData) = target.call{value: value}(callData) (contracts/Timelock.sol#136)\n\tEvent emitted after the call(s):\n\t- ExecuteTransaction(txHash,target,value,signature,data,eta) (contracts/Timelock.sol#139)\n"
  ],
  "timestamp": [
    "CollateralRatioPolicy.refreshCollateralRatio() (contracts/CollateralRatioPolicy.sol#75-112) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(block.timestamp - last_refresh_cr_timestamp >= refresh_cooldown,Must wait for the refresh cooldown since last refresh) (contracts/CollateralRatioPolicy.sol#77-80)\n",
    "Share.unclaimedTreasuryFund() (contracts/Share.sol#110-115) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- _now > endTime (contracts/Share.sol#112)\n\t- treasuryFundLastClaimed >= _now (contracts/Share.sol#113)\n",
    "PcsPairOracle.currentCumulativePrices(address) (contracts/oracle/PcsPairOracle.sol#78-103) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- _blockTimestampLast != blockTimestamp (contracts/oracle/PcsPairOracle.sol#94)\n",
    "Timelock.queueTransaction(address,uint256,string,bytes,uint256) (contracts/Timelock.sol#76-94) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(eta >= getBlockTimestamp() + delay,Timelock::queueTransaction: Estimated execution block must satisfy delay.) (contracts/Timelock.sol#84-87)\n",
    "Timelock.executeTransaction(address,uint256,string,bytes,uint256) (contracts/Timelock.sol#111-142) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(getBlockTimestamp() >= eta,Timelock::executeTransaction: Transaction hasn't surpassed time lock.) (contracts/Timelock.sol#122)\n\t- require(bool,string)(getBlockTimestamp() <= (eta + GRACE_PERIOD),Timelock::executeTransaction: Transaction is stale.) (contracts/Timelock.sol#123)\n"
  ],
  "assembly": [
    "Address.isContract(address) (node_modules/@openzeppelin/contracts/utils/Address.sol#26-35) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Address.sol#33)\n",
    "Address._verifyCallResult(bool,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#171-188) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Address.sol#180-183)\n"
  ],
  "boolean-equal": [
    "CollateralRatioPolicy.refreshCollateralRatio() (contracts/CollateralRatioPolicy.sol#75-112) compares to a boolean constant:\n\t-require(bool,string)(collateral_ratio_paused == false,Collateral Ratio has been paused) (contracts/CollateralRatioPolicy.sol#76)\n",
    "Pool.mint(uint256,uint256,uint256) (contracts/Pool.sol#106-138) compares to a boolean constant:\n\t-require(bool,string)(mint_paused == false,Minting is paused) (contracts/Pool.sol#111)\n",
    "Pool.redeem(uint256,uint256,uint256) (contracts/Pool.sol#140-186) compares to a boolean constant:\n\t-require(bool,string)(redeem_paused == false,Redeeming is paused) (contracts/Pool.sol#145)\n",
    "Treasury.hasPool(address) (contracts/Treasury.sol#100-102) compares to a boolean constant:\n\t-pools[_address] == true (contracts/Treasury.sol#101)\n",
    "Treasury.addPool(address) (contracts/Treasury.sol#206-211) compares to a boolean constant:\n\t-require(bool,string)(pools[pool_address] == false,poolExisted) (contracts/Treasury.sol#207)\n",
    "Treasury.removePool(address) (contracts/Treasury.sol#214-226) compares to a boolean constant:\n\t-require(bool,string)(pools[pool_address] == true,!pool) (contracts/Treasury.sol#215)\n",
    "ZapPool.zapMint(uint256,uint256) (contracts/ZapPool.sol#81-111) compares to a boolean constant:\n\t-require(bool,string)(mint_paused == false,Minting is paused) (contracts/ZapPool.sol#82)\n"
  ],
  "pragma": [
    "Different versions of Solidity is used:\n\t- Version used: ['0.8.4', '>0.6.12', '>=0.6.0', '^0.8.0', '^0.8.4']\n\t- >=0.6.0 (node_modules/@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol#2)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts/access/Ownable.sol#3)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts/security/ReentrancyGuard.sol#3)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#3)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#3)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#3)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#3)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/Address.sol#3)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/Context.sol#3)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/math/SafeMath.sol#3)\n\t- 0.8.4 (contracts/CollateralRatioPolicy.sol#3)\n\t- ABIEncoderV2 (contracts/CollateralRatioPolicy.sol#4)\n\t- 0.8.4 (contracts/CollateralReserve.sol#3)\n\t- 0.8.4 (contracts/ConsolidatedFund.sol#3)\n\t- 0.8.4 (contracts/Dollar.sol#3)\n\t- ABIEncoderV2 (contracts/Dollar.sol#4)\n\t- 0.8.4 (contracts/ERC20/ERC20Custom.sol#3)\n\t- >0.6.12 (contracts/MasterChef.sol#3)\n\t- 0.8.4 (contracts/Pool.sol#3)\n\t- 0.8.4 (contracts/Share.sol#3)\n\t- ABIEncoderV2 (contracts/Share.sol#4)\n\t- 0.8.4 (contracts/Treasury.sol#3)\n\t- ABIEncoderV2 (contracts/Treasury.sol#4)\n\t- 0.8.4 (contracts/TreasuryFund.sol#3)\n\t- ABIEncoderV2 (contracts/TreasuryFund.sol#4)\n\t- 0.8.4 (contracts/TreasuryPolicy.sol#3)\n\t- ABIEncoderV2 (contracts/TreasuryPolicy.sol#4)\n\t- 0.8.4 (contracts/ZapPool.sol#3)\n\t- ABIEncoderV2 (contracts/ZapPool.sol#4)\n\t- 0.8.4 (contracts/_mock/oracle/MockPairOracle.sol#3)\n\t- 0.8.4 (contracts/interfaces/ICollateralRatioPolicy.sol#3)\n\t- ABIEncoderV2 (contracts/interfaces/ICollateralRatioPolicy.sol#4)\n\t- 0.8.4 (contracts/interfaces/ICollateralReserve.sol#3)\n\t- ABIEncoderV2 (contracts/interfaces/ICollateralReserve.sol#4)\n\t- 0.8.4 (contracts/interfaces/IConsolidatedFund.sol#3)\n\t- 0.8.4 (contracts/interfaces/IDollar.sol#3)\n\t- ABIEncoderV2 (contracts/interfaces/IDollar.sol#4)\n\t- 0.8.4 (contracts/interfaces/IOracle.sol#3)\n\t- ABIEncoderV2 (contracts/interfaces/IOracle.sol#4)\n\t- 0.8.4 (contracts/interfaces/IPairOracle.sol#3)\n\t- ABIEncoderV2 (contracts/interfaces/IPairOracle.sol#4)\n\t- 0.8.4 (contracts/interfaces/IPool.sol#3)\n\t- ABIEncoderV2 (contracts/interfaces/IPool.sol#4)\n\t- 0.8.4 (contracts/interfaces/IShare.sol#3)\n\t- ABIEncoderV2 (contracts/interfaces/IShare.sol#4)\n\t- 0.8.4 (contracts/interfaces/IShareTreasuryFund.sol#3)\n\t- ABIEncoderV2 (contracts/interfaces/IShareTreasuryFund.sol#4)\n\t- 0.8.4 (contracts/interfaces/ITreasury.sol#3)\n\t- 0.8.4 (contracts/interfaces/ITreasuryPolicy.sol#3)\n\t- ABIEncoderV2 (contracts/interfaces/ITreasuryPolicy.sol#4)\n\t- ^0.8.4 (contracts/interfaces/ITreasuryVault.sol#3)\n\t- 0.8.4 (contracts/interfaces/IUniswapLP.sol#3)\n\t- ABIEncoderV2 (contracts/interfaces/IUniswapLP.sol#4)\n\t- 0.8.4 (contracts/interfaces/IUniswapV2Router.sol#2)\n\t- 0.8.4 (contracts/libs/Babylonian.sol#3)\n\t- 0.8.4 (contracts/libs/FixedPoint.sol#3)\n\t- 0.8.4 (contracts/libs/SpotPriceGetter.sol#3)\n\t- 0.8.4 (contracts/libs/UQ112x112.sol#3)\n\t- 0.8.4 (contracts/oracle/CollateralOracle.sol#3)\n\t- ABIEncoderV2 (contracts/oracle/CollateralOracle.sol#4)\n\t- 0.8.4 (contracts/oracle/DollarOracle.sol#3)\n\t- ABIEncoderV2 (contracts/oracle/DollarOracle.sol#4)\n\t- 0.8.4 (contracts/oracle/PcsPairOracle.sol#3)\n\t- ABIEncoderV2 (contracts/oracle/PcsPairOracle.sol#4)\n\t- 0.8.4 (contracts/oracle/ShareOracle.sol#3)\n\t- ABIEncoderV2 (contracts/oracle/ShareOracle.sol#4)\n\t- 0.8.4 (contracts/vaults/VaultController.sol#3)\n\t- 0.8.4 (contracts/vaults/aave/AaveDataTypes.sol#2)\n\t- ^0.8.4 (contracts/vaults/aave/IAaveIncentivesController.sol#2)\n\t- 0.8.4 (contracts/vaults/aave/IAaveLendingPool.sol#2)\n\t- ABIEncoderV2 (contracts/vaults/aave/IAaveLendingPool.sol#5)\n\t- ^0.8.4 (contracts/vaults/aave/TreasuryVaultAave.sol#3)\n"
  ],
  "dead-code": [
    "MockCollateral._pull(address,uint256) (contracts/_mock/collateral/MockCollateral.sol#72-74) is never used and should be removed\n",
    "MockCollateral._push(address,uint256) (contracts/_mock/collateral/MockCollateral.sol#68-70) is never used and should be removed\n",
    "Babylonian.sqrt(uint256) (contracts/libs/Babylonian.sol#8-20) is never used and should be removed\n",
    "FixedPoint.decode(FixedPoint.uq112x112) (contracts/libs/FixedPoint.sol#57-59) is never used and should be removed\n",
    "FixedPoint.div(FixedPoint.uq112x112,uint112) (contracts/libs/FixedPoint.sol#36-39) is never used and should be removed\n",
    "FixedPoint.encode(uint112) (contracts/libs/FixedPoint.sol#26-28) is never used and should be removed\n",
    "FixedPoint.encode144(uint144) (contracts/libs/FixedPoint.sol#31-33) is never used and should be removed\n",
    "FixedPoint.reciprocal(FixedPoint.uq112x112) (contracts/libs/FixedPoint.sol#67-70) is never used and should be removed\n",
    "FixedPoint.sqrt(FixedPoint.uq112x112) (contracts/libs/FixedPoint.sol#73-75) is never used and should be removed\n",
    "UQ112x112.encode(uint112) (contracts/libs/UQ112x112.sol#14-16) is never used and should be removed\n",
    "UQ112x112.uqdiv(uint224,uint112) (contracts/libs/UQ112x112.sol#19-21) is never used and should be removed\n",
    "Math.average(uint256,uint256) (contracts/libs/Math.sol#27-30) is never used and should be removed\n",
    "Math.max(uint256,uint256) (contracts/libs/Math.sol#12-14) is never used and should be removed\n",
    "Math.min(uint256,uint256) (contracts/libs/Math.sol#19-21) is never used and should be removed\n",
    "Math.sqrt(uint256) (contracts/libs/Math.sol#33-44) is never used and should be removed\n"
  ],
  "solc-version": [
    "Pragma version0.8.4 (contracts/_mock/collateral/MockCollateral.sol#3) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6\n",
    "solc-0.8.4 is not recommended for deployment\n",
    "Pragma version0.8.4 (contracts/_mock/oracle/MockChainlinkAggregator.sol#3) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6\n",
    "Pragma version>=0.6.0 (node_modules/@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol#2) allows old versions\n",
    "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol#4) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6\n",
    "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/access/Ownable.sol#3) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6\n",
    "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/security/ReentrancyGuard.sol#3) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6\n",
    "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#3) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6\n",
    "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#3) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6\n",
    "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#3) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6\n",
    "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#3) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6\n",
    "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/utils/Address.sol#3) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6\n",
    "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/utils/Context.sol#3) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6\n",
    "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/utils/math/SafeMath.sol#3) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6\n",
    "Pragma version0.8.4 (contracts/CollateralRatioPolicy.sol#3) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6\n",
    "Pragma version0.8.4 (contracts/CollateralReserve.sol#3) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6\n",
    "Pragma version0.8.4 (contracts/ConsolidatedFund.sol#3) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6\n",
    "Pragma version0.8.4 (contracts/Dollar.sol#3) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6\n",
    "Pragma version0.8.4 (contracts/ERC20/ERC20Custom.sol#3) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6\n",
    "Pragma version0.8.4 (contracts/Pool.sol#3) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6\n",
    "Pragma version0.8.4 (contracts/Share.sol#3) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6\n",
    "Pragma version0.8.4 (contracts/Treasury.sol#3) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6\n",
    "Pragma version0.8.4 (contracts/TreasuryFund.sol#3) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6\n",
    "Pragma version0.8.4 (contracts/TreasuryPolicy.sol#3) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6\n",
    "Pragma version0.8.4 (contracts/ZapPool.sol#3) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6\n",
    "Pragma version0.8.4 (contracts/_mock/oracle/MockPairOracle.sol#3) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6\n",
    "Pragma version0.8.4 (contracts/interfaces/ICollateralRatioPolicy.sol#3) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6\n",
    "Pragma version0.8.4 (contracts/interfaces/ICollateralReserve.sol#3) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6\n",
    "Pragma version0.8.4 (contracts/interfaces/IConsolidatedFund.sol#3) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6\n",
    "Pragma version0.8.4 (contracts/interfaces/IDollar.sol#3) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6\n",
    "Pragma version0.8.4 (contracts/interfaces/IOracle.sol#3) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6\n",
    "Pragma version0.8.4 (contracts/interfaces/IPairOracle.sol#3) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6\n",
    "Pragma version0.8.4 (contracts/interfaces/IPool.sol#3) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6\n",
    "Pragma version0.8.4 (contracts/interfaces/IShare.sol#3) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6\n",
    "Pragma version0.8.4 (contracts/interfaces/IShareTreasuryFund.sol#3) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6\n",
    "Pragma version0.8.4 (contracts/interfaces/ITreasury.sol#3) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6\n",
    "Pragma version0.8.4 (contracts/interfaces/ITreasuryPolicy.sol#3) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6\n",
    "Pragma version^0.8.4 (contracts/interfaces/ITreasuryVault.sol#3) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6\n",
    "Pragma version0.8.4 (contracts/interfaces/IUniswapLP.sol#3) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6\n",
    "Pragma version0.8.4 (contracts/interfaces/IUniswapV2Router.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6\n",
    "Pragma version0.8.4 (contracts/libs/Babylonian.sol#3) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6\n",
    "Pragma version0.8.4 (contracts/libs/FixedPoint.sol#3) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6\n",
    "Pragma version0.8.4 (contracts/libs/SpotPriceGetter.sol#3) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6\n",
    "Pragma version0.8.4 (contracts/libs/UQ112x112.sol#3) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6\n",
    "Pragma version0.8.4 (contracts/oracle/CollateralOracle.sol#3) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6\n",
    "Pragma version0.8.4 (contracts/oracle/DollarOracle.sol#3) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6\n",
    "Pragma version0.8.4 (contracts/oracle/PcsPairOracle.sol#3) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6\n",
    "Pragma version0.8.4 (contracts/oracle/ShareOracle.sol#3) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6\n",
    "Pragma version0.8.4 (contracts/vaults/VaultController.sol#3) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6\n",
    "Pragma version0.8.4 (contracts/vaults/aave/AaveDataTypes.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6\n",
    "Pragma version^0.8.4 (contracts/vaults/aave/IAaveIncentivesController.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6\n",
    "Pragma version0.8.4 (contracts/vaults/aave/IAaveLendingPool.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6\n",
    "Pragma version^0.8.4 (contracts/vaults/aave/TreasuryVaultAave.sol#3) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6\n",
    "Pragma version0.8.4 (contracts/interfaces/IMasterChef.sol#3) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6\n",
    "Pragma version0.8.4 (contracts/interfaces/IMasterChefFund.sol#3) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6\n",
    "Pragma version0.8.4 (contracts/interfaces/IWETH.sol#3) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6\n",
    "Pragma version0.8.4 (contracts/libs/Math.sol#3) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6\n",
    "Pragma version0.8.4 (contracts/Multicall.sol#7) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6\n",
    "Pragma version0.8.4 (contracts/Timelock.sol#3) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6\n"
  ],
  "low-level-calls": [
    "Low level call in Address.sendValue(address,uint256) (node_modules/@openzeppelin/contracts/utils/Address.sol#53-59):\n\t- (success) = recipient.call{value: amount}() (node_modules/@openzeppelin/contracts/utils/Address.sol#57)\n",
    "Low level call in Address.functionCallWithValue(address,bytes,uint256,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#114-121):\n\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)\n",
    "Low level call in Address.functionStaticCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#139-145):\n\t- (success,returndata) = target.staticcall(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#143)\n",
    "Low level call in Address.functionDelegateCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#163-169):\n\t- (success,returndata) = target.delegatecall(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#167)\n",
    "Low level call in VaultController.executeTransaction(address,uint256,string,bytes) (contracts/vaults/VaultController.sol#108-125):\n\t- (success,returnData) = target.call{value: value}(callData) (contracts/vaults/VaultController.sol#122)\n",
    "Low level call in TreasuryVaultAave.executeTransaction(address,uint256,string,bytes) (contracts/vaults/aave/TreasuryVaultAave.sol#115-132):\n\t- (success,returnData) = target.call{value: value}(callData) (contracts/vaults/aave/TreasuryVaultAave.sol#129)\n",
    "Low level call in Multicall.aggregate(Multicall.Call[]) (contracts/Multicall.sol#20-31):\n\t- (success,ret) = calls[i].target.call(calls[i].callData) (contracts/Multicall.sol#27)\n",
    "Low level call in Timelock.executeTransaction(address,uint256,string,bytes,uint256) (contracts/Timelock.sol#111-142):\n\t- (success,returnData) = target.call{value: value}(callData) (contracts/Timelock.sol#136)\n"
  ],
  "missing-inheritance": [
    "ConsolidatedFund (contracts/ConsolidatedFund.sol#11-68) should inherit from IConsolidatedFund (contracts/interfaces/IConsolidatedFund.sol#5-13)\n",
    "Share (contracts/Share.sol#13-130) should inherit from IDollar (contracts/interfaces/IDollar.sol#6-10)\n",
    "Share (contracts/Share.sol#13-130) should inherit from IShareTreasuryFund (contracts/interfaces/IShareTreasuryFund.sol#6-12)\n",
    "Treasury (contracts/Treasury.sol#20-278) should inherit from ICollateralRatioPolicy (contracts/interfaces/ICollateralRatioPolicy.sol#6-10)\n",
    "ZapPool (contracts/ZapPool.sol#19-144) should inherit from IPool (contracts/interfaces/IPool.sol#6-10)\n"
  ],
  "redundant-statements": [
    "Redundant expression \"this (node_modules/@openzeppelin/contracts/utils/Context.sol#21)\" inContext (node_modules/@openzeppelin/contracts/utils/Context.sol#15-24)\n"
  ],
  "similar-names": [
    "Variable IUniswapLP.getTokenWeights().tokenWeight0 (contracts/interfaces/IUniswapLP.sol#24) is too similar to IUniswapLP.getTokenWeights().tokenWeight1 (contracts/interfaces/IUniswapLP.sol#24)\n",
    "Variable SpotPriceGetter.consult(address,address)._token0MissingDecimals (contracts/libs/SpotPriceGetter.sol#22) is too similar to SpotPriceGetter.consult(address,address)._token1MissingDecimals (contracts/libs/SpotPriceGetter.sol#23)\n",
    "Variable PcsPairOracle.price0Average (contracts/oracle/PcsPairOracle.sol#26) is too similar to PcsPairOracle.price1Average (contracts/oracle/PcsPairOracle.sol#27)\n",
    "Variable PcsPairOracle.update().price0Cumulative (contracts/oracle/PcsPairOracle.sol#47) is too similar to PcsPairOracle.currentCumulativePrices(address).price1Cumulative (contracts/oracle/PcsPairOracle.sol#83)\n",
    "Variable PcsPairOracle.currentCumulativePrices(address).price0Cumulative (contracts/oracle/PcsPairOracle.sol#82) is too similar to PcsPairOracle.currentCumulativePrices(address).price1Cumulative (contracts/oracle/PcsPairOracle.sol#83)\n",
    "Variable PcsPairOracle.update().price0Cumulative (contracts/oracle/PcsPairOracle.sol#47) is too similar to PcsPairOracle.update().price1Cumulative (contracts/oracle/PcsPairOracle.sol#47)\n",
    "Variable PcsPairOracle.currentCumulativePrices(address).price0Cumulative (contracts/oracle/PcsPairOracle.sol#82) is too similar to PcsPairOracle.update().price1Cumulative (contracts/oracle/PcsPairOracle.sol#47)\n",
    "Variable PcsPairOracle.price0CumulativeLast (contracts/oracle/PcsPairOracle.sol#23) is too similar to PcsPairOracle.price1CumulativeLast (contracts/oracle/PcsPairOracle.sol#24)\n"
  ],
  "too-many-digits": [
    "CollateralRatioPolicy.constructor() (contracts/CollateralRatioPolicy.sol#44-51) uses literals with too many digits:\n\t- target_collateral_ratio = 1000000 (contracts/CollateralRatioPolicy.sol#46)\n",
    "CollateralRatioPolicy.constructor() (contracts/CollateralRatioPolicy.sol#44-51) uses literals with too many digits:\n\t- effective_collateral_ratio = 1000000 (contracts/CollateralRatioPolicy.sol#47)\n",
    "CollateralRatioPolicy.constructor() (contracts/CollateralRatioPolicy.sol#44-51) uses literals with too many digits:\n\t- price_target = 1000000 (contracts/CollateralRatioPolicy.sol#49)\n",
    "TreasuryFund.slitherConstructorConstantVariables() (contracts/TreasuryFund.sol#13-52) uses literals with too many digits:\n\t- BURN_EXESS_RATIO = 900000 (contracts/TreasuryFund.sol#17)\n",
    "TreasuryFund.slitherConstructorConstantVariables() (contracts/TreasuryFund.sol#13-52) uses literals with too many digits:\n\t- PRECISION = 1000000 (contracts/TreasuryFund.sol#18)\n",
    "ZapPool.slitherConstructorConstantVariables() (contracts/ZapPool.sol#19-144) uses literals with too many digits:\n\t- SLIPPAGE_MAX = 100000 (contracts/ZapPool.sol#39)\n",
    "VaultController.slitherConstructorConstantVariables() (contracts/vaults/VaultController.sol#13-128) uses literals with too many digits:\n\t- RATIO_PRECISION = 1000000 (contracts/vaults/VaultController.sol#22)\n"
  ],
  "unused-state": [
    "CollateralRatioPolicy.RATIO_PRECISION (contracts/CollateralRatioPolicy.sol#24) is never used in CollateralRatioPolicy (contracts/CollateralRatioPolicy.sol#15-165)\n",
    "TreasuryPolicy.PRICE_PRECISION (contracts/TreasuryPolicy.sol#14) is never used in TreasuryPolicy (contracts/TreasuryPolicy.sol#10-68)\n",
    "TreasuryPolicy.RATIO_PRECISION (contracts/TreasuryPolicy.sol#15) is never used in TreasuryPolicy (contracts/TreasuryPolicy.sol#10-68)\n",
    "VaultController.RATIO_PRECISION (contracts/vaults/VaultController.sol#22) is never used in VaultController (contracts/vaults/VaultController.sol#13-128)\n",
    "VaultController.swapTimeout (contracts/vaults/VaultController.sol#23) is never used in VaultController (contracts/vaults/VaultController.sol#13-128)\n"
  ],
  "constable-states": [
    "MasterChef.BONUS_MULTIPLIER (contracts/MasterChef.sol#48) should be constant\n",
    "Share.treasuryFundEmissionRate (contracts/Share.sol#33-34) should be constant\n",
    "VaultController.slippage (contracts/vaults/VaultController.sol#24) should be constant\n",
    "VaultController.usdc (contracts/vaults/VaultController.sol#18) should be constant\n",
    "VaultController.wmatic (contracts/vaults/VaultController.sol#19) should be constant\n"
  ],
  "external-function": [
    "name() should be declared external:\n\t- MockCollateral.name() (contracts/_mock/collateral/MockCollateral.sol#45-47)\n",
    "symbol() should be declared external:\n\t- MockCollateral.symbol() (contracts/_mock/collateral/MockCollateral.sol#49-51)\n",
    "decimals() should be declared external:\n\t- MockCollateral.decimals() (contracts/_mock/collateral/MockCollateral.sol#53-55)\n",
    "totalSupply() should be declared external:\n\t- MockCollateral.totalSupply() (contracts/_mock/collateral/MockCollateral.sol#90-92)\n",
    "mint(address,uint256) should be declared external:\n\t- MockCollateral.mint(address,uint256) (contracts/_mock/collateral/MockCollateral.sol#100-103)\n",
    "burn(uint256) should be declared external:\n\t- MockCollateral.burn(uint256) (contracts/_mock/collateral/MockCollateral.sol#105-111)\n",
    "setLatestPrice(int256) should be declared external:\n\t- MockChainlinkAggregator.setLatestPrice(int256) (contracts/_mock/oracle/MockChainlinkAggregator.sol#32-34)\n",
    "setDecimals(uint8) should be declared external:\n\t- MockChainlinkAggregator.setDecimals(uint8) (contracts/_mock/oracle/MockChainlinkAggregator.sol#36-38)\n",
    "renounceOwnership() should be declared external:\n\t- Ownable.renounceOwnership() (node_modules/@openzeppelin/contracts/access/Ownable.sol#54-57)\n",
    "transferOwnership(address) should be declared external:\n\t- Ownable.transferOwnership(address) (node_modules/@openzeppelin/contracts/access/Ownable.sol#63-67)\n",
    "name() should be declared external:\n\t- ERC20.name() (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#60-62)\n",
    "symbol() should be declared external:\n\t- ERC20.symbol() (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#68-70)\n",
    "decimals() should be declared external:\n\t- ERC20.decimals() (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#85-87)\n",
    "totalSupply() should be declared external:\n\t- ERC20.totalSupply() (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#92-94)\n\t- ERC20Custom.totalSupply() (contracts/ERC20/ERC20Custom.sol#48-50)\n",
    "balanceOf(address) should be declared external:\n\t- ERC20.balanceOf(address) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#99-101)\n\t- ERC20Custom.balanceOf(address) (contracts/ERC20/ERC20Custom.sol#55-57)\n",
    "transfer(address,uint256) should be declared external:\n\t- ERC20.transfer(address,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#111-114)\n\t- ERC20Custom.transfer(address,uint256) (contracts/ERC20/ERC20Custom.sol#67-70)\n",
    "approve(address,uint256) should be declared external:\n\t- ERC20.approve(address,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#130-133)\n\t- ERC20Custom.approve(address,uint256) (contracts/ERC20/ERC20Custom.sol#86-89)\n",
    "transferFrom(address,address,uint256) should be declared external:\n\t- ERC20.transferFrom(address,address,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#148-156)\n\t- ERC20Custom.transferFrom(address,address,uint256) (contracts/ERC20/ERC20Custom.sol#103-115)\n",
    "increaseAllowance(address,uint256) should be declared external:\n\t- ERC20.increaseAllowance(address,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#170-173)\n",
    "decreaseAllowance(address,uint256) should be declared external:\n\t- ERC20.decreaseAllowance(address,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#189-195)\n",
    "refreshCollateralRatio() should be declared external:\n\t- CollateralRatioPolicy.refreshCollateralRatio() (contracts/CollateralRatioPolicy.sol#75-112)\n",
    "setRatioStep(uint256) should be declared external:\n\t- CollateralRatioPolicy.setRatioStep(uint256) (contracts/CollateralRatioPolicy.sol#116-118)\n",
    "setPriceTarget(uint256) should be declared external:\n\t- CollateralRatioPolicy.setPriceTarget(uint256) (contracts/CollateralRatioPolicy.sol#120-122)\n",
    "setRefreshCooldown(uint256) should be declared external:\n\t- CollateralRatioPolicy.setRefreshCooldown(uint256) (contracts/CollateralRatioPolicy.sol#124-126)\n",
    "toggleCollateralRatio() should be declared external:\n\t- CollateralRatioPolicy.toggleCollateralRatio() (contracts/CollateralRatioPolicy.sol#153-155)\n",
    "toggleEffectiveCollateralRatio() should be declared external:\n\t- CollateralRatioPolicy.toggleEffectiveCollateralRatio() (contracts/CollateralRatioPolicy.sol#157-159)\n",
    "setOracleDollar(address) should be declared external:\n\t- CollateralRatioPolicy.setOracleDollar(address) (contracts/CollateralRatioPolicy.sol#161-164)\n",
    "fundBalance(address) should be declared external:\n\t- CollateralReserve.fundBalance(address) (contracts/CollateralReserve.sol#31-33)\n",
    "transferTo(address,address,uint256) should be declared external:\n\t- CollateralReserve.transferTo(address,address,uint256) (contracts/CollateralReserve.sol#37-45)\n",
    "setTreasury(address) should be declared external:\n\t- CollateralReserve.setTreasury(address) (contracts/CollateralReserve.sol#47-51)\n",
    "balance(address) should be declared external:\n\t- ConsolidatedFund.balance(address) (contracts/ConsolidatedFund.sol#27-29)\n",
    "transferTo(address,address,uint256) should be declared external:\n\t- ConsolidatedFund.transferTo(address,address,uint256) (contracts/ConsolidatedFund.sol#33-44)\n",
    "addPool(address,address) should be declared external:\n\t- ConsolidatedFund.addPool(address,address) (contracts/ConsolidatedFund.sol#47-52)\n",
    "removePool(address) should be declared external:\n\t- ConsolidatedFund.removePool(address) (contracts/ConsolidatedFund.sol#55-60)\n",
    "rescueFund(address) should be declared external:\n\t- ConsolidatedFund.rescueFund(address) (contracts/ConsolidatedFund.sol#62-64)\n",
    "setTreasuryAddress(address) should be declared external:\n\t- Dollar.setTreasuryAddress(address) (contracts/Dollar.sol#53-57)\n",
    "increaseAllowance(address,uint256) should be declared external:\n\t- ERC20Custom.increaseAllowance(address,uint256) (contracts/ERC20/ERC20Custom.sol#129-132)\n",
    "decreaseAllowance(address,uint256) should be declared external:\n\t- ERC20Custom.decreaseAllowance(address,uint256) (contracts/ERC20/ERC20Custom.sol#148-155)\n",
    "burn(uint256) should be declared external:\n\t- ERC20Custom.burn(uint256) (contracts/ERC20/ERC20Custom.sol#210-212)\n",
    "burnFrom(address,uint256) should be declared external:\n\t- ERC20Custom.burnFrom(address,uint256) (contracts/ERC20/ERC20Custom.sol#225-231)\n",
    "add(uint256,IERC20,bool) should be declared external:\n\t- MasterChef.add(uint256,IERC20,bool) (contracts/MasterChef.sol#84-95)\n",
    "set(uint256,uint256,bool) should be declared external:\n\t- MasterChef.set(uint256,uint256,bool) (contracts/MasterChef.sol#98-108)\n",
    "deposit(uint256,uint256) should be declared external:\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#159-171)\n",
    "withdraw(uint256,uint256) should be declared external:\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#174-185)\n",
    "emergencyWithdraw(uint256) should be declared external:\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#188-195)\n",
    "addPool(address) should be declared external:\n\t- Treasury.addPool(address) (contracts/Treasury.sol#206-211)\n",
    "removePool(address) should be declared external:\n\t- Treasury.removePool(address) (contracts/Treasury.sol#214-226)\n",
    "balance() should be declared external:\n\t- TreasuryFund.balance() (contracts/TreasuryFund.sol#41-43)\n",
    "setShareAddress(address) should be declared external:\n\t- TreasuryFund.setShareAddress(address) (contracts/TreasuryFund.sol#45-47)\n",
    "unclaimed_pool_collateral() should be declared external:\n\t- ZapPool.unclaimed_pool_collateral() (contracts/ZapPool.sol#77-79)\n",
    "setSwapOptions(address,address[]) should be declared external:\n\t- VaultController.setSwapOptions(address,address[]) (contracts/vaults/VaultController.sol#94-101)\n",
    "executeTransaction(address,uint256,string,bytes) should be declared external:\n\t- VaultController.executeTransaction(address,uint256,string,bytes) (contracts/vaults/VaultController.sol#108-125)\n",
    "executeTransaction(address,uint256,string,bytes) should be declared external:\n\t- TreasuryVaultAave.executeTransaction(address,uint256,string,bytes) (contracts/vaults/aave/TreasuryVaultAave.sol#115-132)\n",
    "aggregate(Multicall.Call[]) should be declared external:\n\t- Multicall.aggregate(Multicall.Call[]) (contracts/Multicall.sol#20-31)\n",
    "getEthBalance(address) should be declared external:\n\t- Multicall.getEthBalance(address) (contracts/Multicall.sol#34-36)\n",
    "getBlockHash(uint256) should be declared external:\n\t- Multicall.getBlockHash(uint256) (contracts/Multicall.sol#38-40)\n",
    "getLastBlockHash() should be declared external:\n\t- Multicall.getLastBlockHash() (contracts/Multicall.sol#42-44)\n",
    "getCurrentBlockTimestamp() should be declared external:\n\t- Multicall.getCurrentBlockTimestamp() (contracts/Multicall.sol#46-48)\n",
    "getCurrentBlockDifficulty() should be declared external:\n\t- Multicall.getCurrentBlockDifficulty() (contracts/Multicall.sol#50-52)\n",
    "getCurrentBlockGasLimit() should be declared external:\n\t- Multicall.getCurrentBlockGasLimit() (contracts/Multicall.sol#54-56)\n",
    "getCurrentBlockCoinbase() should be declared external:\n\t- Multicall.getCurrentBlockCoinbase() (contracts/Multicall.sol#58-60)\n",
    "setDelay(uint256) should be declared external:\n\t- Timelock.setDelay(uint256) (contracts/Timelock.sol#52-59)\n",
    "acceptAdmin() should be declared external:\n\t- Timelock.acceptAdmin() (contracts/Timelock.sol#61-67)\n",
    "setPendingAdmin(address) should be declared external:\n\t- Timelock.setPendingAdmin(address) (contracts/Timelock.sol#69-74)\n",
    "queueTransaction(address,uint256,string,bytes,uint256) should be declared external:\n\t- Timelock.queueTransaction(address,uint256,string,bytes,uint256) (contracts/Timelock.sol#76-94)\n",
    "cancelTransaction(address,uint256,string,bytes,uint256) should be declared external:\n\t- Timelock.cancelTransaction(address,uint256,string,bytes,uint256) (contracts/Timelock.sol#96-109)\n",
    "executeTransaction(address,uint256,string,bytes,uint256) should be declared external:\n\t- Timelock.executeTransaction(address,uint256,string,bytes,uint256) (contracts/Timelock.sol#111-142)\n"
  ]
}