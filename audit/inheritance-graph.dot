digraph "" {
MockCollateral[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>MockCollateral</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    name()</TD></TR><TR><TD align="left">    symbol()</TD></TR><TR><TD align="left">    decimals()</TD></TR><TR><TD align="left">    allowance(address,address)</TD></TR><TR><TD align="left">    balanceOf(address)</TD></TR><TR><TD align="left">    totalSupply()</TD></TR><TR><TD align="left">    approve(address,uint256)</TD></TR><TR><TD align="left">    mint(address,uint256)</TD></TR><TR><TD align="left">    burn(uint256)</TD></TR><TR><TD align="left">    transfer(address,uint256)</TD></TR><TR><TD align="left">    transferFrom(address,address,uint256)</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    add(uint256,uint256)</TD></TR><TR><TD align="left">    sub(uint256,uint256)</TD></TR><TR><TD align="left">    _move(address,address,uint256)</TD></TR><TR><TD align="left">    _push(address,uint256)</TD></TR><TR><TD align="left">    _pull(address,uint256)</TD></TR><TR><TD align="left">    _mint(address,uint256)</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    _onlyOwner_()</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _name</TD></TR><TR><TD align="left">    _symbol</TD></TR><TR><TD align="left">    _decimals</TD></TR><TR><TD align="left">    _owner</TD></TR><TR><TD align="left">    _totalSupply</TD></TR><TR><TD align="left">    _balance</TD></TR><TR><TD align="left">    _allowance</TD></TR></TABLE> >];

MockChainlinkAggregator[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>MockChainlinkAggregator</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    decimals()</TD></TR><TR><TD align="left">    latestRoundData()</TD></TR><TR><TD align="left">    setLatestPrice(int256)</TD></TR><TR><TD align="left">    setDecimals(uint8)</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    mock_price</TD></TR><TR><TD align="left">    mock_decimals</TD></TR></TABLE> >];

AggregatorV3Interface[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>AggregatorV3Interface</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    decimals()</TD></TR><TR><TD align="left">    description()</TD></TR><TR><TD align="left">    version()</TD></TR><TR><TD align="left">    getRoundData(uint80)</TD></TR><TR><TD align="left">    latestRoundData()</TD></TR></TABLE> >];

Initializable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Initializable</B></TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    initializer()</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _initialized</TD></TR><TR><TD align="left">    _initializing</TD></TR></TABLE> >];

Ownable -> Context;
Ownable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Ownable</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    owner()</TD></TR><TR><TD align="left">    renounceOwnership()</TD></TR><TR><TD align="left">    transferOwnership(address)</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    onlyOwner()</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _owner</TD></TR></TABLE> >];

ReentrancyGuard[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ReentrancyGuard</B></TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    nonReentrant()</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _NOT_ENTERED</TD></TR><TR><TD align="left">    _ENTERED</TD></TR><TR><TD align="left">    _status</TD></TR></TABLE> >];

ERC20 -> Context [ label="1" ];
ERC20 -> IERC20 [ label="2" ];
ERC20 -> IERC20Metadata [ label="3" ];
ERC20[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ERC20</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left"><font color="#FFA500">    name()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    symbol()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    decimals()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    totalSupply()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    balanceOf(address)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    transfer(address,uint256)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    allowance(address,address)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    approve(address,uint256)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    transferFrom(address,address,uint256)</font></TD></TR><TR><TD align="left">    increaseAllowance(address,uint256)</TD></TR><TR><TD align="left">    decreaseAllowance(address,uint256)</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _transfer(address,address,uint256)</TD></TR><TR><TD align="left">    _mint(address,uint256)</TD></TR><TR><TD align="left">    _burn(address,uint256)</TD></TR><TR><TD align="left">    _approve(address,address,uint256)</TD></TR><TR><TD align="left">    _beforeTokenTransfer(address,address,uint256)</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _balances</TD></TR><TR><TD align="left">    _allowances</TD></TR><TR><TD align="left">    _totalSupply</TD></TR><TR><TD align="left">    _name</TD></TR><TR><TD align="left">    _symbol</TD></TR></TABLE> >];

IERC20[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IERC20</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    totalSupply()</TD></TR><TR><TD align="left">    balanceOf(address)</TD></TR><TR><TD align="left">    transfer(address,uint256)</TD></TR><TR><TD align="left">    allowance(address,address)</TD></TR><TR><TD align="left">    approve(address,uint256)</TD></TR><TR><TD align="left">    transferFrom(address,address,uint256)</TD></TR></TABLE> >];

IERC20Metadata -> IERC20;
IERC20Metadata[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IERC20Metadata</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    name()</TD></TR><TR><TD align="left">    symbol()</TD></TR><TR><TD align="left">    decimals()</TD></TR></TABLE> >];

SafeERC20[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>SafeERC20</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    safeTransfer(IERC20,address,uint256)</TD></TR><TR><TD align="left">    safeTransferFrom(IERC20,address,address,uint256)</TD></TR><TR><TD align="left">    safeApprove(IERC20,address,uint256)</TD></TR><TR><TD align="left">    safeIncreaseAllowance(IERC20,address,uint256)</TD></TR><TR><TD align="left">    safeDecreaseAllowance(IERC20,address,uint256)</TD></TR><TR><TD align="left">    _callOptionalReturn(IERC20,bytes)</TD></TR></TABLE> >];

Address[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Address</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    isContract(address)</TD></TR><TR><TD align="left">    sendValue(address,uint256)</TD></TR><TR><TD align="left">    functionCall(address,bytes)</TD></TR><TR><TD align="left">    functionCall(address,bytes,string)</TD></TR><TR><TD align="left">    functionCallWithValue(address,bytes,uint256)</TD></TR><TR><TD align="left">    functionCallWithValue(address,bytes,uint256,string)</TD></TR><TR><TD align="left">    functionStaticCall(address,bytes)</TD></TR><TR><TD align="left">    functionStaticCall(address,bytes,string)</TD></TR><TR><TD align="left">    functionDelegateCall(address,bytes)</TD></TR><TR><TD align="left">    functionDelegateCall(address,bytes,string)</TD></TR><TR><TD align="left">    _verifyCallResult(bool,bytes,string)</TD></TR></TABLE> >];

Context[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Context</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _msgSender()</TD></TR><TR><TD align="left">    _msgData()</TD></TR></TABLE> >];

SafeMath[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>SafeMath</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    tryAdd(uint256,uint256)</TD></TR><TR><TD align="left">    trySub(uint256,uint256)</TD></TR><TR><TD align="left">    tryMul(uint256,uint256)</TD></TR><TR><TD align="left">    tryDiv(uint256,uint256)</TD></TR><TR><TD align="left">    tryMod(uint256,uint256)</TD></TR><TR><TD align="left">    add(uint256,uint256)</TD></TR><TR><TD align="left">    sub(uint256,uint256)</TD></TR><TR><TD align="left">    mul(uint256,uint256)</TD></TR><TR><TD align="left">    div(uint256,uint256)</TD></TR><TR><TD align="left">    mod(uint256,uint256)</TD></TR><TR><TD align="left">    sub(uint256,uint256,string)</TD></TR><TR><TD align="left">    div(uint256,uint256,string)</TD></TR><TR><TD align="left">    mod(uint256,uint256,string)</TD></TR></TABLE> >];

CollateralRatioPolicy -> Ownable [ label="1" ];
CollateralRatioPolicy -> ICollateralRatioPolicy [ label="2" ];
CollateralRatioPolicy -> Initializable [ label="3" ];
CollateralRatioPolicy[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>CollateralRatioPolicy</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    initialize(address,address)</TD></TR><TR><TD align="left">    calcEffectiveCollateralRatio()</TD></TR><TR><TD align="left">    refreshCollateralRatio()</TD></TR><TR><TD align="left">    setRatioStep(uint256)</TD></TR><TR><TD align="left">    setPriceTarget(uint256)</TD></TR><TR><TD align="left">    setRefreshCooldown(uint256)</TD></TR><TR><TD align="left">    setPriceBand(uint256)</TD></TR><TR><TD align="left">    setTreasury(address)</TD></TR><TR><TD align="left">    setDollar(address)</TD></TR><TR><TD align="left">    reset(uint256,uint256)</TD></TR><TR><TD align="left">    toggleCollateralRatio()</TD></TR><TR><TD align="left">    toggleEffectiveCollateralRatio()</TD></TR><TR><TD align="left">    setOracleDollar(address)</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    oracleDollar</TD></TR><TR><TD align="left">    dollar</TD></TR><TR><TD align="left">    treasury</TD></TR><TR><TD align="left">    target_collateral_ratio</TD></TR><TR><TD align="left">    effective_collateral_ratio</TD></TR><TR><TD align="left">    last_refresh_cr_timestamp</TD></TR><TR><TD align="left">    refresh_cooldown</TD></TR><TR><TD align="left">    ratio_step</TD></TR><TR><TD align="left">    price_target</TD></TR><TR><TD align="left">    price_band</TD></TR><TR><TD align="left">    collateral_ratio_paused</TD></TR><TR><TD align="left">    using_effective_collateral_ratio</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    PRICE_PRECISION</TD></TR><TR><TD align="left">    RATIO_PRECISION</TD></TR><TR><TD align="left">    COLLATERAL_RATIO_MAX</TD></TR></TABLE> >];

CollateralReserve -> Ownable [ label="1" ];
CollateralReserve -> ICollateralReserve [ label="2" ];
CollateralReserve -> Initializable [ label="3" ];
CollateralReserve[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>CollateralReserve</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    initialize(address)</TD></TR><TR><TD align="left">    fundBalance(address)</TD></TR><TR><TD align="left"><font color="#FFA500">    transferTo(address,address,uint256)</font></TD></TR><TR><TD align="left">    setTreasury(address)</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    onlyTreasury()</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    treasury</TD></TR></TABLE> >];

ConsolidatedFund -> Ownable;
ConsolidatedFund[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ConsolidatedFund</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    balance(address)</TD></TR><TR><TD align="left">    transferTo(address,address,uint256)</TD></TR><TR><TD align="left">    addPool(address,address)</TD></TR><TR><TD align="left">    removePool(address)</TD></TR><TR><TD align="left">    rescueFund(address)</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    onlyPools()</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    pools</TD></TR></TABLE> >];

Dollar -> ERC20Custom [ label="1" ];
Dollar -> IDollar [ label="2" ];
Dollar -> Ownable [ label="3" ];
Dollar -> Initializable [ label="4" ];
Dollar[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Dollar</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    initialize(string,string,address)</TD></TR><TR><TD align="left"><font color="#FFA500">    poolBurnFrom(address,uint256)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    poolMint(address,uint256)</font></TD></TR><TR><TD align="left">    setTreasuryAddress(address)</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    onlyPools()</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    symbol</TD></TR><TR><TD align="left">    name</TD></TR><TR><TD align="left">    decimals</TD></TR><TR><TD align="left">    genesis_supply</TD></TR><TR><TD align="left">    treasury</TD></TR></TABLE> >];

ERC20Custom -> Context [ label="1" ];
ERC20Custom -> IERC20 [ label="2" ];
ERC20Custom[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ERC20Custom</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left"><font color="#FFA500">    totalSupply()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    balanceOf(address)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    transfer(address,uint256)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    allowance(address,address)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    approve(address,uint256)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    transferFrom(address,address,uint256)</font></TD></TR><TR><TD align="left">    increaseAllowance(address,uint256)</TD></TR><TR><TD align="left">    decreaseAllowance(address,uint256)</TD></TR><TR><TD align="left">    burn(uint256)</TD></TR><TR><TD align="left">    burnFrom(address,uint256)</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _transfer(address,address,uint256)</TD></TR><TR><TD align="left">    _mint(address,uint256)</TD></TR><TR><TD align="left">    _burn(address,uint256)</TD></TR><TR><TD align="left">    _approve(address,address,uint256)</TD></TR><TR><TD align="left">    _burnFrom(address,uint256)</TD></TR><TR><TD align="left">    _beforeTokenTransfer(address,address,uint256)</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _balances</TD></TR><TR><TD align="left">    _allowances</TD></TR><TR><TD align="left">    _totalSupply</TD></TR></TABLE> >];

MasterChef -> Ownable;
MasterChef[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>MasterChef</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    fundBalance()</TD></TR><TR><TD align="left">    poolLength()</TD></TR><TR><TD align="left">    add(uint256,IERC20,bool)</TD></TR><TR><TD align="left">    set(uint256,uint256,bool)</TD></TR><TR><TD align="left">    setfund(address)</TD></TR><TR><TD align="left">    pendingReward(uint256,address)</TD></TR><TR><TD align="left">    getMultiplier(uint256,uint256)</TD></TR><TR><TD align="left">    massUpdatePools()</TD></TR><TR><TD align="left">    updatePool(uint256)</TD></TR><TR><TD align="left">    deposit(uint256,uint256)</TD></TR><TR><TD align="left">    withdraw(uint256,uint256)</TD></TR><TR><TD align="left">    emergencyWithdraw(uint256)</TD></TR><TR><TD align="left">    setRewardPerBlock(uint256)</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    safeRewardTransfer(address,uint256)</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    rewardToken<font color="blue" POINT-SIZE="10"> (IERC20)</font></TD></TR><TR><TD align="left">    rewardPerBlock</TD></TR><TR><TD align="left">    BONUS_MULTIPLIER</TD></TR><TR><TD align="left">    fund</TD></TR><TR><TD align="left">    poolInfo</TD></TR><TR><TD align="left">    userInfo</TD></TR><TR><TD align="left">    totalAllocPoint</TD></TR><TR><TD align="left">    startBlock</TD></TR></TABLE> >];

Pool -> Ownable [ label="1" ];
Pool -> ReentrancyGuard [ label="2" ];
Pool -> Initializable [ label="3" ];
Pool -> IPool [ label="4" ];
Pool[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Pool</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    initialize(address,address,address,address)</TD></TR><TR><TD align="left">    info()</TD></TR><TR><TD align="left">    collateralReserve()</TD></TR><TR><TD align="left"><font color="#FFA500">    getCollateralPrice()</font></TD></TR><TR><TD align="left">    mint(uint256,uint256,uint256)</TD></TR><TR><TD align="left">    redeem(uint256,uint256,uint256)</TD></TR><TR><TD align="left">    collectRedemption()</TD></TR><TR><TD align="left">    toggleMinting()</TD></TR><TR><TD align="left">    toggleRedeeming()</TD></TR><TR><TD align="left">    setOracle(address)</TD></TR><TR><TD align="left">    setRedemptionDelay(uint256)</TD></TR><TR><TD align="left">    setTreasury(address)</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _transferCollateralToReserve(address,uint256)</TD></TR><TR><TD align="left">    _mintShareToCollateralReserve(uint256)</TD></TR><TR><TD align="left">    _requestTransferCollateral(address,uint256)</TD></TR><TR><TD align="left">    _requestTransferShare(address,uint256)</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    onlyTreasury()</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    oracle</TD></TR><TR><TD align="left">    collateral</TD></TR><TR><TD align="left">    dollar</TD></TR><TR><TD align="left">    treasury</TD></TR><TR><TD align="left">    share</TD></TR><TR><TD align="left">    redeem_share_balances</TD></TR><TR><TD align="left">    redeem_collateral_balances</TD></TR><TR><TD align="left">    unclaimed_pool_collateral</TD></TR><TR><TD align="left">    unclaimed_pool_share</TD></TR><TR><TD align="left">    last_redeemed</TD></TR><TR><TD align="left">    redemption_delay</TD></TR><TR><TD align="left">    mint_paused</TD></TR><TR><TD align="left">    redeem_paused</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    PRICE_PRECISION</TD></TR><TR><TD align="left">    COLLATERAL_RATIO_PRECISION</TD></TR><TR><TD align="left">    COLLATERAL_RATIO_MAX</TD></TR><TR><TD align="left">    missing_decimals</TD></TR></TABLE> >];

Share -> ERC20Custom [ label="1" ];
Share -> Ownable [ label="2" ];
Share -> Initializable [ label="3" ];
Share[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Share</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    initialize(string,string,address,address,address,uint256)</TD></TR><TR><TD align="left">    claimCommunityRewards(uint256)</TD></TR><TR><TD align="left">    setTreasuryAddress(address)</TD></TR><TR><TD align="left">    setTreasuryFund(address)</TD></TR><TR><TD align="left">    setCommunityRewardController(address)</TD></TR><TR><TD align="left">    poolMint(address,uint256)</TD></TR><TR><TD align="left">    poolBurnFrom(address,uint256)</TD></TR><TR><TD align="left">    unclaimedTreasuryFund()</TD></TR><TR><TD align="left">    claimTreasuryFundRewards()</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    onlyPools()</TD></TR><TR><TD align="left">    onlyTreasuryFund()</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    symbol</TD></TR><TR><TD align="left">    name</TD></TR><TR><TD align="left">    decimals</TD></TR><TR><TD align="left">    genesis_supply</TD></TR><TR><TD align="left">    treasury</TD></TR><TR><TD align="left">    COMMUNITY_REWARD_ALLOCATION</TD></TR><TR><TD align="left">    TREASURY_FUND_ALLOCATION</TD></TR><TR><TD align="left">    TREASURY_FUND_VESTING_DURATION</TD></TR><TR><TD align="left">    startTime</TD></TR><TR><TD align="left">    endTime</TD></TR><TR><TD align="left">    treasuryFund</TD></TR><TR><TD align="left">    treasuryFundLastClaimed</TD></TR><TR><TD align="left">    treasuryFundEmissionRate</TD></TR><TR><TD align="left">    communityRewardController</TD></TR><TR><TD align="left">    communityRewardClaimed</TD></TR></TABLE> >];

Treasury -> ITreasury [ label="1" ];
Treasury -> Ownable [ label="2" ];
Treasury -> Initializable [ label="3" ];
Treasury -> ReentrancyGuard [ label="4" ];
Treasury[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Treasury</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    initialize(address,address,address,address,address,address,address,address)</TD></TR><TR><TD align="left">    dollarPrice()</TD></TR><TR><TD align="left">    sharePrice()</TD></TR><TR><TD align="left">    collateralPrice()</TD></TR><TR><TD align="left"><font color="#FFA500">    hasPool(address)</font></TD></TR><TR><TD align="left">    target_collateral_ratio()</TD></TR><TR><TD align="left">    effective_collateral_ratio()</TD></TR><TR><TD align="left">    minting_fee()</TD></TR><TR><TD align="left">    redemption_fee()</TD></TR><TR><TD align="left"><font color="#FFA500">    info()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    globalCollateralBalance()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    globalCollateralValue()</font></TD></TR><TR><TD align="left">    totalUnclaimedBalance()</TD></TR><TR><TD align="left">    excessCollateralBalance()</TD></TR><TR><TD align="left"><font color="#FFA500">    requestTransfer(address,address,uint256)</font></TD></TR><TR><TD align="left">    extractProfit(uint256)</TD></TR><TR><TD align="left">    addPool(address)</TD></TR><TR><TD align="left">    removePool(address)</TD></TR><TR><TD align="left">    setTreasuryPolicy(address)</TD></TR><TR><TD align="left">    setCollateralRatioPolicy(address)</TD></TR><TR><TD align="left">    setOracleDollar(address)</TD></TR><TR><TD align="left">    setOracleShare(address)</TD></TR><TR><TD align="left">    setOracleCollateral(address)</TD></TR><TR><TD align="left">    setCollateralAddress(address)</TD></TR><TR><TD align="left">    setCollateralReserve(address)</TD></TR><TR><TD align="left">    setProfitSharingFund(address)</TD></TR><TR><TD align="left">    setProfitController(address)</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    onlyPools()</TD></TR><TR><TD align="left">    onlyProfitController()</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    collateralReserve</TD></TR><TR><TD align="left">    oracleDollar</TD></TR><TR><TD align="left">    oracleShare</TD></TR><TR><TD align="left">    oracleCollateral</TD></TR><TR><TD align="left">    dollar</TD></TR><TR><TD align="left">    share</TD></TR><TR><TD align="left">    collateral</TD></TR><TR><TD align="left">    collateralRatioPolicy</TD></TR><TR><TD align="left">    treasuryPolicy</TD></TR><TR><TD align="left">    profitSharingFund</TD></TR><TR><TD align="left">    profitController</TD></TR><TR><TD align="left">    pools_array</TD></TR><TR><TD align="left">    pools</TD></TR><TR><TD align="left">    missing_decimals</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    PRICE_PRECISION</TD></TR><TR><TD align="left">    RATIO_PRECISION</TD></TR></TABLE> >];

TreasuryFund -> Ownable [ label="1" ];
TreasuryFund -> Initializable [ label="2" ];
TreasuryFund[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>TreasuryFund</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    initialize(address)</TD></TR><TR><TD align="left">    claim()</TD></TR><TR><TD align="left">    transfer(address,uint256)</TD></TR><TR><TD align="left">    transferDevFundOwnership(address)</TD></TR><TR><TD align="left">    balance()</TD></TR><TR><TD align="left">    setShareAddress(address)</TD></TR><TR><TD align="left">    rescueFund(address,uint256)</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    share</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    BURN_EXESS_RATIO</TD></TR><TR><TD align="left">    PRECISION</TD></TR></TABLE> >];

TreasuryPolicy -> Ownable [ label="1" ];
TreasuryPolicy -> Initializable [ label="2" ];
TreasuryPolicy -> ITreasuryPolicy [ label="3" ];
TreasuryPolicy[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>TreasuryPolicy</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    initialize(address,uint256,uint256,uint256)</TD></TR><TR><TD align="left">    setTreasury(address)</TD></TR><TR><TD align="left">    setRedemptionFee(uint256)</TD></TR><TR><TD align="left">    setMintingFee(uint256)</TD></TR><TR><TD align="left">    setExcessCollateralSafetyMargin(uint256)</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    treasury</TD></TR><TR><TD align="left">    redemption_fee</TD></TR><TR><TD align="left">    REDEMPTION_FEE_MAX</TD></TR><TR><TD align="left">    minting_fee</TD></TR><TR><TD align="left">    MINTING_FEE_MAX</TD></TR><TR><TD align="left">    excess_collateral_safety_margin</TD></TR><TR><TD align="left">    EXCESS_COLLATERAL_SAFETY_MARGIN_MIN</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    PRICE_PRECISION</TD></TR><TR><TD align="left">    RATIO_PRECISION</TD></TR></TABLE> >];

ZapPool -> Ownable [ label="1" ];
ZapPool -> ReentrancyGuard [ label="2" ];
ZapPool -> Initializable [ label="3" ];
ZapPool[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ZapPool</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    initialize(ITreasury,IDollar,IShare,ERC20,IOracle)</TD></TR><TR><TD align="left">    collateralReserve()</TD></TR><TR><TD align="left">    getCollateralPrice()</TD></TR><TR><TD align="left">    unclaimed_pool_collateral()</TD></TR><TR><TD align="left">    zapMint(uint256,uint256)</TD></TR><TR><TD align="left">    toggleMinting()</TD></TR><TR><TD align="left">    setSlippage(uint256)</TD></TR><TR><TD align="left">    setOracle(IOracle)</TD></TR><TR><TD align="left">    setRouter(address,address[])</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _transferCollateralToReserve(uint256)</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    notContract()</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    oracle<font color="blue" POINT-SIZE="10"> (IOracle)</font></TD></TR><TR><TD align="left">    dollar<font color="blue" POINT-SIZE="10"> (IDollar)</font></TD></TR><TR><TD align="left">    collateral<font color="blue" POINT-SIZE="10"> (ERC20)</font></TD></TR><TR><TD align="left">    share<font color="blue" POINT-SIZE="10"> (IShare)</font></TD></TR><TR><TD align="left">    treasury<font color="blue" POINT-SIZE="10"> (ITreasury)</font></TD></TR><TR><TD align="left">    router<font color="blue" POINT-SIZE="10"> (IUniswapV2Router)</font></TD></TR><TR><TD align="left">    router_path</TD></TR><TR><TD align="left">    slippage</TD></TR><TR><TD align="left">    mint_paused</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    missing_decimals</TD></TR><TR><TD align="left">    PRICE_PRECISION</TD></TR><TR><TD align="left">    RATIO_PRECISION</TD></TR><TR><TD align="left">    COLLATERAL_RATIO_MAX</TD></TR><TR><TD align="left">    SLIPPAGE_MAX</TD></TR><TR><TD align="left">    LIMIT_SWAP_TIME</TD></TR></TABLE> >];

MockPairOracle -> IPairOracle [ label="1" ];
MockPairOracle -> Ownable [ label="2" ];
MockPairOracle[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>MockPairOracle</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left"><font color="#FFA500">    consult(address,uint256)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    update()</font></TD></TR><TR><TD align="left">    setPeriod(uint256)</TD></TR><TR><TD align="left">    mock(uint256)</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    mockPrice</TD></TR><TR><TD align="left">    PERIOD</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    PRICE_PRECISION</TD></TR></TABLE> >];

ICollateralRatioPolicy[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ICollateralRatioPolicy</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    target_collateral_ratio()</TD></TR><TR><TD align="left">    effective_collateral_ratio()</TD></TR></TABLE> >];

ICollateralReserve[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ICollateralReserve</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    transferTo(address,address,uint256)</TD></TR></TABLE> >];

IConsolidatedFund[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IConsolidatedFund</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    balance(address)</TD></TR><TR><TD align="left">    transferTo(address,address,uint256)</TD></TR></TABLE> >];

IDollar[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IDollar</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    poolBurnFrom(address,uint256)</TD></TR><TR><TD align="left">    poolMint(address,uint256)</TD></TR></TABLE> >];

IOracle[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IOracle</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    consult()</TD></TR></TABLE> >];

IPairOracle[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IPairOracle</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    consult(address,uint256)</TD></TR><TR><TD align="left">    update()</TD></TR></TABLE> >];

IPool[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IPool</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    getCollateralPrice()</TD></TR><TR><TD align="left">    unclaimed_pool_collateral()</TD></TR></TABLE> >];

IShare[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IShare</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    poolBurnFrom(address,uint256)</TD></TR><TR><TD align="left">    poolMint(address,uint256)</TD></TR></TABLE> >];

IShareTreasuryFund[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IShareTreasuryFund</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    claimTreasuryFundRewards()</TD></TR><TR><TD align="left">    unclaimedTreasuryFund()</TD></TR><TR><TD align="left">    setTreasuryFund(address)</TD></TR></TABLE> >];

ITreasury[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ITreasury</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    hasPool(address)</TD></TR><TR><TD align="left">    collateralReserve()</TD></TR><TR><TD align="left">    globalCollateralBalance()</TD></TR><TR><TD align="left">    globalCollateralValue()</TD></TR><TR><TD align="left">    requestTransfer(address,address,uint256)</TD></TR><TR><TD align="left">    info()</TD></TR></TABLE> >];

ITreasuryPolicy[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ITreasuryPolicy</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    minting_fee()</TD></TR><TR><TD align="left">    redemption_fee()</TD></TR><TR><TD align="left">    excess_collateral_safety_margin()</TD></TR></TABLE> >];

ITreasuryVault[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ITreasuryVault</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    vaultBalance()</TD></TR><TR><TD align="left">    deposit(uint256)</TD></TR><TR><TD align="left">    withdraw()</TD></TR></TABLE> >];

IUniswapLP[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IUniswapLP</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    token0()</TD></TR><TR><TD align="left">    token1()</TD></TR><TR><TD align="left">    getReserves()</TD></TR><TR><TD align="left">    price0CumulativeLast()</TD></TR><TR><TD align="left">    price1CumulativeLast()</TD></TR><TR><TD align="left">    getTokenWeights()</TD></TR></TABLE> >];

IUniswapV2Router[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IUniswapV2Router</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    swapExactTokensForTokens(uint256,uint256,address[],address,uint256)</TD></TR></TABLE> >];

Babylonian[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Babylonian</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    sqrt(uint256)</TD></TR></TABLE> >];

FixedPoint[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>FixedPoint</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    encode(uint112)</TD></TR><TR><TD align="left">    encode144(uint144)</TD></TR><TR><TD align="left">    div(FixedPoint.uq112x112,uint112)</TD></TR><TR><TD align="left">    mul(FixedPoint.uq112x112,uint256)</TD></TR><TR><TD align="left">    fraction(uint112,uint112)</TD></TR><TR><TD align="left">    decode(FixedPoint.uq112x112)</TD></TR><TR><TD align="left">    decode144(FixedPoint.uq144x112)</TD></TR><TR><TD align="left">    reciprocal(FixedPoint.uq112x112)</TD></TR><TR><TD align="left">    sqrt(FixedPoint.uq112x112)</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    RESOLUTION</TD></TR><TR><TD align="left">    Q112</TD></TR><TR><TD align="left">    Q224</TD></TR></TABLE> >];

SpotPriceGetter[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>SpotPriceGetter</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    consult(address,address)</TD></TR><TR><TD align="left">    consultToUsdChainlink(address,address,address)</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    PRICE_PRECISION</TD></TR></TABLE> >];

UQ112x112[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>UQ112x112</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    encode(uint112)</TD></TR><TR><TD align="left">    uqdiv(uint224,uint112)</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    Q112</TD></TR></TABLE> >];

CollateralOracle -> Ownable [ label="1" ];
CollateralOracle -> IOracle [ label="2" ];
CollateralOracle[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>CollateralOracle</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left"><font color="#FFA500">    consult()</font></TD></TR><TR><TD align="left">    setChainlinkCollateralUsd(address)</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    chainlinkCollateralUsd</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    PRICE_PRECISION</TD></TR></TABLE> >];

DollarOracle -> Ownable [ label="1" ];
DollarOracle -> IOracle [ label="2" ];
DollarOracle[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>DollarOracle</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left"><font color="#FFA500">    consult()</font></TD></TR><TR><TD align="left">    setOracleCollateralUsd(address)</TD></TR><TR><TD align="left">    setOracleDollarCollateral(address)</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    oracleDollarCollateral</TD></TR><TR><TD align="left">    oracleCollateralUsd</TD></TR><TR><TD align="left">    dollar</TD></TR><TR><TD align="left">    missingDecimals</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    PRICE_PRECISION</TD></TR></TABLE> >];

PcsPairOracle -> Ownable [ label="1" ];
PcsPairOracle -> IPairOracle [ label="2" ];
PcsPairOracle[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>PcsPairOracle</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    setPeriod(uint256)</TD></TR><TR><TD align="left"><font color="#FFA500">    update()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    consult(address,uint256)</font></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    currentBlockTimestamp()</TD></TR><TR><TD align="left">    currentCumulativePrices(address)</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    PERIOD</TD></TR><TR><TD align="left">    pair<font color="blue" POINT-SIZE="10"> (IUniswapLP)</font></TD></TR><TR><TD align="left">    token0</TD></TR><TR><TD align="left">    token1</TD></TR><TR><TD align="left">    price0CumulativeLast</TD></TR><TR><TD align="left">    price1CumulativeLast</TD></TR><TR><TD align="left">    blockTimestampLast</TD></TR><TR><TD align="left">    price0Average</TD></TR><TR><TD align="left">    price1Average</TD></TR></TABLE> >];

ShareOracle -> Ownable [ label="1" ];
ShareOracle -> IOracle [ label="2" ];
ShareOracle[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ShareOracle</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left"><font color="#FFA500">    consult()</font></TD></TR><TR><TD align="left">    setChainlinkToUsd(address)</TD></TR><TR><TD align="left">    setOracleShare(address)</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    priceTokenToUsd()</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    oracleShare</TD></TR><TR><TD align="left">    chainlinkToUsd</TD></TR><TR><TD align="left">    share</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    PRICE_PRECISION</TD></TR></TABLE> >];

VaultController -> Ownable [ label="1" ];
VaultController -> Initializable [ label="2" ];
VaultController[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>VaultController</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    initialize(address,address,address)</TD></TR><TR><TD align="left">    claimIncentiveRewards()</TD></TR><TR><TD align="left">    setAdmin(address)</TD></TR><TR><TD align="left">    setSwapOptions(address,address[])</TD></TR><TR><TD align="left">    setCollateralReserve(address)</TD></TR><TR><TD align="left">    executeTransaction(address,uint256,string,bytes)</TD></TR><TR><TD align="left">    receive()</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _swap(address,address,uint256)</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    onlyAdmin()</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    admin</TD></TR><TR><TD align="left">    collateralReserve</TD></TR><TR><TD align="left">    treasuryVault<font color="blue" POINT-SIZE="10"> (ITreasuryVault)</font></TD></TR><TR><TD align="left">    slippage</TD></TR><TR><TD align="left">    router</TD></TR><TR><TD align="left">    swapPath</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    usdc</TD></TR><TR><TD align="left">    wmatic</TD></TR><TR><TD align="left">    RATIO_PRECISION</TD></TR><TR><TD align="left">    swapTimeout</TD></TR></TABLE> >];

DataTypes[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>DataTypes</B></TD></TR></TABLE> >];

IAaveIncentivesController[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IAaveIncentivesController</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    getRewardsBalance(address[],address)</TD></TR><TR><TD align="left">    claimRewards(address[],uint256,address)</TD></TR><TR><TD align="left">    getUserUnclaimedRewards(address)</TD></TR><TR><TD align="left">    REWARD_TOKEN()</TD></TR></TABLE> >];

ILendingPool[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ILendingPool</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    deposit(address,uint256,address,uint16)</TD></TR><TR><TD align="left">    withdraw(address,uint256,address)</TD></TR><TR><TD align="left">    getReserveData(address)</TD></TR></TABLE> >];

TreasuryVaultAave -> ITreasuryVault [ label="1" ];
TreasuryVaultAave -> Ownable [ label="2" ];
TreasuryVaultAave -> Initializable [ label="3" ];
TreasuryVaultAave -> ReentrancyGuard [ label="4" ];
TreasuryVaultAave[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>TreasuryVaultAave</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    initialize(address,address,address,address)</TD></TR><TR><TD align="left"><font color="#FFA500">    deposit(uint256)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    withdraw()</font></TD></TR><TR><TD align="left">    claimIncetiveRewards()</TD></TR><TR><TD align="left">    getUnclaimedIncentiveRewardsBalance()</TD></TR><TR><TD align="left">    balanceOfAToken()</TD></TR><TR><TD align="left">    setTreasury(address)</TD></TR><TR><TD align="left">    setIncentiveController(address)</TD></TR><TR><TD align="left">    executeTransaction(address,uint256,string,bytes)</TD></TR><TR><TD align="left">    receive()</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _getATokenAddress(address)</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    onlyTreasury()</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    asset<font color="blue" POINT-SIZE="10"> (IERC20)</font></TD></TR><TR><TD align="left">    aToken<font color="blue" POINT-SIZE="10"> (IERC20)</font></TD></TR><TR><TD align="left">    treasury</TD></TR><TR><TD align="left">    AaveLendingPool<font color="blue" POINT-SIZE="10"> (ILendingPool)</font></TD></TR><TR><TD align="left">    AaveIncentivesController<font color="blue" POINT-SIZE="10"> (IAaveIncentivesController)</font></TD></TR><TR><TD align="left">    vaultBalance</TD></TR></TABLE> >];

IMasterChef[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IMasterChef</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    userInfo(uint256,address)</TD></TR></TABLE> >];

IMasterChefFund[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IMasterChefFund</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    balance()</TD></TR><TR><TD align="left">    transferTo(address,uint256)</TD></TR></TABLE> >];

IWETH[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IWETH</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    deposit()</TD></TR><TR><TD align="left">    transfer(address,uint256)</TD></TR><TR><TD align="left">    transferFrom(address,address,uint256)</TD></TR><TR><TD align="left">    withdraw(uint256)</TD></TR></TABLE> >];

Math[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Math</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    max(uint256,uint256)</TD></TR><TR><TD align="left">    min(uint256,uint256)</TD></TR><TR><TD align="left">    average(uint256,uint256)</TD></TR><TR><TD align="left">    sqrt(uint256)</TD></TR></TABLE> >];

Multicall[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Multicall</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    aggregate(Multicall.Call[])</TD></TR><TR><TD align="left">    getEthBalance(address)</TD></TR><TR><TD align="left">    getBlockHash(uint256)</TD></TR><TR><TD align="left">    getLastBlockHash()</TD></TR><TR><TD align="left">    getCurrentBlockTimestamp()</TD></TR><TR><TD align="left">    getCurrentBlockDifficulty()</TD></TR><TR><TD align="left">    getCurrentBlockGasLimit()</TD></TR><TR><TD align="left">    getCurrentBlockCoinbase()</TD></TR></TABLE> >];

Timelock[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Timelock</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    setDelay(uint256)</TD></TR><TR><TD align="left">    acceptAdmin()</TD></TR><TR><TD align="left">    setPendingAdmin(address)</TD></TR><TR><TD align="left">    queueTransaction(address,uint256,string,bytes,uint256)</TD></TR><TR><TD align="left">    cancelTransaction(address,uint256,string,bytes,uint256)</TD></TR><TR><TD align="left">    executeTransaction(address,uint256,string,bytes,uint256)</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    getBlockTimestamp()</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    GRACE_PERIOD</TD></TR><TR><TD align="left">    MINIMUM_DELAY</TD></TR><TR><TD align="left">    MAXIMUM_DELAY</TD></TR><TR><TD align="left">    admin</TD></TR><TR><TD align="left">    pendingAdmin</TD></TR><TR><TD align="left">    delay</TD></TR><TR><TD align="left">    queuedTransactions</TD></TR></TABLE> >];

}